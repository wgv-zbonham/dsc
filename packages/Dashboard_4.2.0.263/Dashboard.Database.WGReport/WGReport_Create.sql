/*
Deployment script for Dashboard.Database.WGReport

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar WGReportDb "WGReport"
:setvar DatabaseName "WGReport"
:setvar DefaultFilePrefix "WGReport"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
:setvar DatabaseName "WGReport"
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Creating [dbo].[BridgeCaseItemInfoRecordingEvent]...';


GO
CREATE TABLE [dbo].[BridgeCaseItemInfoRecordingEvent] (
    [ID]               BIGINT   IDENTITY (1, 1) NOT NULL,
    [CaseItemInfoID]   BIGINT   NOT NULL,
    [RecordingEventID] BIGINT   NOT NULL,
    [DateCreated]      DATETIME NOT NULL,
    [DateExpired]      DATETIME NULL,
    [Active]           BIT      NOT NULL,
    CONSTRAINT [PK_BridgeCaseItemInfoRecordingEvent] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[FactCaseItemInfo]...';


GO
CREATE TABLE [dbo].[FactCaseItemInfo] (
    [ID]                             BIGINT           IDENTITY (1, 1) NOT NULL,
    [SourceID]                       UNIQUEIDENTIFIER NOT NULL,
    [CaseID]                         UNIQUEIDENTIFIER NOT NULL,
    [CaseCreated]                    DATETIME         NOT NULL,
    [CaseItemInfoName]               VARCHAR (256)    NOT NULL,
    [CaseItemInfoCategory]           INT              NOT NULL,
    [CaseItemInfoCreated]            DATETIME         NOT NULL,
    [CaseItemInfoStorageReferenceID] BIGINT           NOT NULL,
    [CaseItemInfoSizeInBytes]        BIGINT           NOT NULL,
    [CaseItemInfoModified]           DATETIME         NOT NULL,
    CONSTRAINT [PK_FactCaseItemInfo] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[LogType]...';


GO
CREATE TABLE [dbo].[LogType] (
    [ID]   INT           NOT NULL,
    [Name] NVARCHAR (20) NULL
);


GO
PRINT N'Creating [dbo].[LogType].[PK_LogType_ID]...';


GO
CREATE CLUSTERED INDEX [PK_LogType_ID]
    ON [dbo].[LogType]([ID] ASC);


GO
PRINT N'Creating [dbo].[LogEvents]...';


GO
CREATE TABLE [dbo].[LogEvents] (
    [ID]            BIGINT           IDENTITY (1, 1) NOT NULL,
    [CorrelationID] UNIQUEIDENTIFIER NULL,
    [ActivityID]    NVARCHAR (200)   NULL,
    [LogTypeID]     INT              NOT NULL,
    [EventNumber]   INT              NOT NULL,
    [MachineName]   NVARCHAR (200)   NOT NULL,
    [Source]        NVARCHAR (200)   NULL,
    [ProcessID]     INT              NULL,
    [ThreadID]      INT              NULL,
    [Credential]    NVARCHAR (200)   NULL,
    [Message]       NVARCHAR (1024)  NOT NULL,
    [Detail]        NVARCHAR (MAX)   NULL,
    [Timestamp]     DATETIME         NOT NULL,
    [CreatedAt]     DATETIME         NOT NULL,
    [CreatedBy]     NVARCHAR (255)   NOT NULL
);


GO
PRINT N'Creating [dbo].[LogEvents].[PK_LogEvents_ID]...';


GO
CREATE CLUSTERED INDEX [PK_LogEvents_ID]
    ON [dbo].[LogEvents]([ID] ASC);


GO
PRINT N'Creating [dbo].[BridgeEventCategory]...';


GO
CREATE TABLE [dbo].[BridgeEventCategory] (
    [ID]               BIGINT   IDENTITY (1, 1) NOT NULL,
    [EventCategoryID]  BIGINT   NOT NULL,
    [RecordingEventID] BIGINT   NOT NULL,
    [DateCreated]      DATETIME NOT NULL,
    [DateExpired]      DATETIME NULL,
    [Active]           BIT      NOT NULL,
    CONSTRAINT [PK_BridgeEventCategory] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[DimImportReason]...';


GO
CREATE TABLE [dbo].[DimImportReason] (
    [ID]          BIGINT       IDENTITY (1, 1) NOT NULL,
    [SourceID]    INT          NOT NULL,
    [Name]        VARCHAR (50) NOT NULL,
    [DateCreated] DATETIME     NOT NULL,
    [DateExpired] DATETIME     NULL,
    [DateDeleted] DATETIME     NULL,
    [Active]      BIT          NOT NULL,
    CONSTRAINT [PK_DimImportReason] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[DimActivityType]...';


GO
CREATE TABLE [dbo].[DimActivityType] (
    [ID]               BIGINT       IDENTITY (1, 1) NOT NULL,
    [SourceID]         INT          NOT NULL,
    [ActivityCategory] VARCHAR (50) NOT NULL,
    [Name]             VARCHAR (50) NOT NULL,
    [DateCreated]      DATETIME     NOT NULL,
    [DateExpired]      DATETIME     NULL,
    [DateDeleted]      DATETIME     NULL,
    [Active]           BIT          NOT NULL,
    CONSTRAINT [PK_DimActivityType] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[FactDeviceCheckout]...';


GO
CREATE TABLE [dbo].[FactDeviceCheckout] (
    [ID]               BIGINT           IDENTITY (1, 1) NOT NULL,
    [SourceID]         UNIQUEIDENTIFIER NOT NULL,
    [ActivityTypeID]   BIGINT           NOT NULL,
    [DeviceID]         BIGINT           NOT NULL,
    [OfficerID]        BIGINT           NOT NULL,
    [DateCheckedOutID] INT              NOT NULL,
    [AssignmentID]     UNIQUEIDENTIFIER NOT NULL,
    [DateCheckedOut]   DATETIME         NOT NULL,
    CONSTRAINT [PK_FactDeviceCheckout] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[DimDevice]...';


GO
CREATE TABLE [dbo].[DimDevice] (
    [ID]                   BIGINT           IDENTITY (1, 1) NOT NULL,
    [SourceID]             UNIQUEIDENTIFIER NOT NULL,
    [Name]                 VARCHAR (50)     NOT NULL,
    [DeviceType]           VARCHAR (45)     NOT NULL,
    [SerialNumber]         VARCHAR (50)     NOT NULL,
    [VehicleID]            VARCHAR (50)     NOT NULL,
    [IPAddress]            VARCHAR (50)     NOT NULL,
    [MACAddress]           VARCHAR (50)     NOT NULL,
    [SoftwareVersion]      VARCHAR (50)     NOT NULL,
    [ConfigurationVersion] VARCHAR (50)     NOT NULL,
    [DateCreated]          DATETIME         NOT NULL,
    [DateExpired]          DATETIME         NULL,
    [DateDeleted]          DATETIME         NULL,
    [Active]               BIT              NOT NULL,
    CONSTRAINT [PK_DimDevice] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[FactEventActivity]...';


GO
CREATE TABLE [dbo].[FactEventActivity] (
    [ID]               BIGINT   IDENTITY (1, 1) NOT NULL,
    [RecordingEventID] BIGINT   NOT NULL,
    [ActivityDateID]   INT      NOT NULL,
    [ActivityTypeID]   BIGINT   NOT NULL,
    [ActivityDate]     DATETIME NOT NULL,
    CONSTRAINT [PK_FactEventActivity] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[DimStorage]...';


GO
CREATE TABLE [dbo].[DimStorage] (
    [ID]          BIGINT        IDENTITY (1, 1) NOT NULL,
    [SourceID]    INT           NOT NULL,
    [Name]        VARCHAR (50)  NOT NULL,
    [Path]        VARCHAR (255) NOT NULL,
    [Size]        BIGINT        NULL,
    [DateCreated] DATETIME      NOT NULL,
    [DateExpired] DATETIME      NULL,
    [DateDeleted] DATETIME      NULL,
    [Active]      BIT           NOT NULL,
    CONSTRAINT [PK_DimStorage] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[DimEventCategory]...';


GO
CREATE TABLE [dbo].[DimEventCategory] (
    [ID]            BIGINT        IDENTITY (1, 1) NOT NULL,
    [SourceID]      INT           NOT NULL,
    [Name]          VARCHAR (128) NOT NULL,
    [DisplayIndex]  TINYINT       NOT NULL,
    [RetentionDays] INT           NOT NULL,
    [Critical]      BIT           NOT NULL,
    [DateCreated]   DATETIME      NOT NULL,
    [DateExpired]   DATETIME      NULL,
    [DateDeleted]   DATETIME      NULL,
    [Active]        BIT           NOT NULL,
    CONSTRAINT [PK_DimEventCategory] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[FactRecordingEvent]...';


GO
CREATE TABLE [dbo].[FactRecordingEvent] (
    [ID]                   BIGINT            IDENTITY (1, 1) NOT NULL,
    [SourceID]             UNIQUEIDENTIFIER  NOT NULL,
    [OfficerID]            BIGINT            NOT NULL,
    [StorageID]            BIGINT            NOT NULL,
    [DeviceID]             BIGINT            NOT NULL,
    [ImportReasonID]       BIGINT            NOT NULL,
    [RecordStartID]        INT               NOT NULL,
    [DateCreatedID]        INT               NOT NULL,
    [DateImportedID]       INT               NOT NULL,
    [Duration]             BIGINT            NOT NULL,
    [Restricted]           BIT               NULL,
    [DVRCleared]           BIT               NOT NULL,
    [REID]                 VARCHAR (50)      NULL,
    [PreEvent]             BIGINT            NULL,
    [RecordStart]          DATETIME          NULL,
    [RecordStop]           DATETIME          NULL,
    [PostEvent]            BIGINT            NULL,
    [ImportSource]         INT               NOT NULL,
    [DateCreated]          DATETIME          NOT NULL,
    [DateImported]         DATETIME          NULL,
    [LastUsed]             DATETIME          NULL,
    [Archived]             DATE              NULL,
    [SubstationID]         UNIQUEIDENTIFIER  NULL,
    [SoftwareVersion]      VARCHAR (50)      NULL,
    [ConfigurationVersion] VARCHAR (50)      NOT NULL,
    [MinLatitude]          VARCHAR (25)      NULL,
    [MaxLatitude]          VARCHAR (25)      NULL,
    [MinLongitude]         VARCHAR (25)      NULL,
    [MaxLongitude]         VARCHAR (25)      NULL,
    [MinSpeed]             INT               NOT NULL,
    [MaxSpeed]             INT               NOT NULL,
    [MinGPS]               [sys].[geography] NULL,
    [MaxGPS]               [sys].[geography] NULL,
    [Size]                 BIGINT            NULL,
    [Note]                 NVARCHAR (4000)   NULL,
    [GroupId]              VARCHAR (50)      NULL,
    [Part]                 TINYINT           NULL,
    [TotalParts]           TINYINT           NULL,
    [LinkChecked]          BIT               NOT NULL,
    [DateExpired]          DATETIME          NULL,
    CONSTRAINT [PK_FactRecordingEvent] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[DimDate]...';


GO
CREATE TABLE [dbo].[DimDate] (
    [DateID]              INT          NOT NULL,
    [Date]                DATE         NOT NULL,
    [Day]                 TINYINT      NOT NULL,
    [DaySuffix]           CHAR (2)     NOT NULL,
    [Weekday]             TINYINT      NOT NULL,
    [WeekDayName]         VARCHAR (10) NOT NULL,
    [IsWeekend]           BIT          NOT NULL,
    [IsHoliday]           BIT          NOT NULL,
    [HolidayText]         VARCHAR (64) NOT NULL,
    [DOWInMonth]          TINYINT      NOT NULL,
    [DayOfYear]           SMALLINT     NOT NULL,
    [WeekOfMonth]         TINYINT      NOT NULL,
    [WeekOfYear]          TINYINT      NOT NULL,
    [ISOWeekOfYear]       TINYINT      NOT NULL,
    [Month]               TINYINT      NOT NULL,
    [MonthName]           VARCHAR (10) NOT NULL,
    [Quarter]             TINYINT      NOT NULL,
    [QuarterName]         VARCHAR (6)  NOT NULL,
    [Year]                INT          NOT NULL,
    [MMYYYY]              CHAR (6)     NOT NULL,
    [YYYYMM]              CHAR (6)     NOT NULL,
    [MonthYear]           CHAR (7)     NOT NULL,
    [FirstDayOfMonth]     DATE         NOT NULL,
    [LastDayOfMonth]      DATE         NOT NULL,
    [FirstDayOfQuarter]   DATE         NOT NULL,
    [LastDayOfQuarter]    DATE         NOT NULL,
    [FirstDayOfYear]      DATE         NOT NULL,
    [LastDayOfYear]       DATE         NOT NULL,
    [FirstDayOfNextMonth] DATE         NOT NULL,
    [FirstDayOfNextYear]  DATE         NOT NULL,
    PRIMARY KEY CLUSTERED ([DateID] ASC)
);


GO
PRINT N'Creating [dbo].[FactDeviceActivity]...';


GO
CREATE TABLE [dbo].[FactDeviceActivity] (
    [ID]             BIGINT   IDENTITY (1, 1) NOT NULL,
    [DeviceID]       BIGINT   NOT NULL,
    [ActivityDateID] INT      NOT NULL,
    [ActivityTypeID] BIGINT   NOT NULL,
    [ActivityDate]   DATETIME NOT NULL,
    CONSTRAINT [PK_FactDeviceActivity] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[DimOfficer]...';


GO
CREATE TABLE [dbo].[DimOfficer] (
    [ID]          BIGINT       IDENTITY (1, 1) NOT NULL,
    [SourceID]    INT          NOT NULL,
    [ParentID]    BIGINT       NOT NULL,
    [FirstName]   VARCHAR (50) NOT NULL,
    [LastName]    VARCHAR (50) NOT NULL,
    [MiddleName]  VARCHAR (50) NOT NULL,
    [Title]       VARCHAR (20) NOT NULL,
    [Badge]       VARCHAR (20) NOT NULL,
    [DateCreated] DATETIME     NOT NULL,
    [DateExpired] DATETIME     NULL,
    [DateDeleted] DATETIME     NULL,
    [Active]      BIT          NOT NULL,
    CONSTRAINT [PK_DimOfficer] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[BridgeCaseItemInfoRecordingEvent]...';


GO
ALTER TABLE [dbo].[BridgeCaseItemInfoRecordingEvent]
    ADD DEFAULT ((-1)) FOR [CaseItemInfoID];


GO
PRINT N'Creating unnamed constraint on [dbo].[BridgeCaseItemInfoRecordingEvent]...';


GO
ALTER TABLE [dbo].[BridgeCaseItemInfoRecordingEvent]
    ADD DEFAULT ((-1)) FOR [RecordingEventID];


GO
PRINT N'Creating unnamed constraint on [dbo].[BridgeCaseItemInfoRecordingEvent]...';


GO
ALTER TABLE [dbo].[BridgeCaseItemInfoRecordingEvent]
    ADD DEFAULT (getutcdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[BridgeCaseItemInfoRecordingEvent]...';


GO
ALTER TABLE [dbo].[BridgeCaseItemInfoRecordingEvent]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactCaseItemInfo]...';


GO
ALTER TABLE [dbo].[FactCaseItemInfo]
    ADD DEFAULT ('00000000-0000-0000-0000-000000000000') FOR [SourceID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactCaseItemInfo]...';


GO
ALTER TABLE [dbo].[FactCaseItemInfo]
    ADD DEFAULT ('00000000-0000-0000-0000-000000000000') FOR [CaseID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactCaseItemInfo]...';


GO
ALTER TABLE [dbo].[FactCaseItemInfo]
    ADD DEFAULT ('') FOR [CaseCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactCaseItemInfo]...';


GO
ALTER TABLE [dbo].[FactCaseItemInfo]
    ADD DEFAULT ('') FOR [CaseItemInfoName];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactCaseItemInfo]...';


GO
ALTER TABLE [dbo].[FactCaseItemInfo]
    ADD DEFAULT ('') FOR [CaseItemInfoCategory];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactCaseItemInfo]...';


GO
ALTER TABLE [dbo].[FactCaseItemInfo]
    ADD DEFAULT ('') FOR [CaseItemInfoCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactCaseItemInfo]...';


GO
ALTER TABLE [dbo].[FactCaseItemInfo]
    ADD DEFAULT ('') FOR [CaseItemInfoStorageReferenceID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactCaseItemInfo]...';


GO
ALTER TABLE [dbo].[FactCaseItemInfo]
    ADD DEFAULT ('') FOR [CaseItemInfoSizeInBytes];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactCaseItemInfo]...';


GO
ALTER TABLE [dbo].[FactCaseItemInfo]
    ADD DEFAULT ('') FOR [CaseItemInfoModified];


GO
PRINT N'Creating unnamed constraint on [dbo].[LogEvents]...';


GO
ALTER TABLE [dbo].[LogEvents]
    ADD DEFAULT (3) FOR [LogTypeID];


GO
PRINT N'Creating unnamed constraint on [dbo].[LogEvents]...';


GO
ALTER TABLE [dbo].[LogEvents]
    ADD DEFAULT (0) FOR [EventNumber];


GO
PRINT N'Creating unnamed constraint on [dbo].[LogEvents]...';


GO
ALTER TABLE [dbo].[LogEvents]
    ADD DEFAULT (0) FOR [ProcessID];


GO
PRINT N'Creating unnamed constraint on [dbo].[LogEvents]...';


GO
ALTER TABLE [dbo].[LogEvents]
    ADD DEFAULT (0) FOR [ThreadID];


GO
PRINT N'Creating unnamed constraint on [dbo].[LogEvents]...';


GO
ALTER TABLE [dbo].[LogEvents]
    ADD DEFAULT (GETUTCDATE()) FOR [Timestamp];


GO
PRINT N'Creating unnamed constraint on [dbo].[LogEvents]...';


GO
ALTER TABLE [dbo].[LogEvents]
    ADD DEFAULT (GETUTCDATE()) FOR [CreatedAt];


GO
PRINT N'Creating unnamed constraint on [dbo].[BridgeEventCategory]...';


GO
ALTER TABLE [dbo].[BridgeEventCategory]
    ADD DEFAULT ((-1)) FOR [EventCategoryID];


GO
PRINT N'Creating unnamed constraint on [dbo].[BridgeEventCategory]...';


GO
ALTER TABLE [dbo].[BridgeEventCategory]
    ADD DEFAULT ((-1)) FOR [RecordingEventID];


GO
PRINT N'Creating unnamed constraint on [dbo].[BridgeEventCategory]...';


GO
ALTER TABLE [dbo].[BridgeEventCategory]
    ADD DEFAULT (getutcdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[BridgeEventCategory]...';


GO
ALTER TABLE [dbo].[BridgeEventCategory]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimImportReason]...';


GO
ALTER TABLE [dbo].[DimImportReason]
    ADD DEFAULT ((-1)) FOR [SourceID];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimImportReason]...';


GO
ALTER TABLE [dbo].[DimImportReason]
    ADD DEFAULT ('') FOR [Name];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimImportReason]...';


GO
ALTER TABLE [dbo].[DimImportReason]
    ADD DEFAULT (getutcdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimImportReason]...';


GO
ALTER TABLE [dbo].[DimImportReason]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimActivityType]...';


GO
ALTER TABLE [dbo].[DimActivityType]
    ADD DEFAULT ((-1)) FOR [SourceID];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimActivityType]...';


GO
ALTER TABLE [dbo].[DimActivityType]
    ADD DEFAULT ('') FOR [ActivityCategory];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimActivityType]...';


GO
ALTER TABLE [dbo].[DimActivityType]
    ADD DEFAULT ('') FOR [Name];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimActivityType]...';


GO
ALTER TABLE [dbo].[DimActivityType]
    ADD DEFAULT (getutcdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimActivityType]...';


GO
ALTER TABLE [dbo].[DimActivityType]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactDeviceCheckout]...';


GO
ALTER TABLE [dbo].[FactDeviceCheckout]
    ADD DEFAULT ('00000000-0000-0000-0000-000000000000') FOR [SourceID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactDeviceCheckout]...';


GO
ALTER TABLE [dbo].[FactDeviceCheckout]
    ADD DEFAULT ((-1)) FOR [ActivityTypeID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactDeviceCheckout]...';


GO
ALTER TABLE [dbo].[FactDeviceCheckout]
    ADD DEFAULT ((-1)) FOR [DeviceID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactDeviceCheckout]...';


GO
ALTER TABLE [dbo].[FactDeviceCheckout]
    ADD DEFAULT ((-1)) FOR [OfficerID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactDeviceCheckout]...';


GO
ALTER TABLE [dbo].[FactDeviceCheckout]
    ADD DEFAULT ((-1)) FOR [DateCheckedOutID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactDeviceCheckout]...';


GO
ALTER TABLE [dbo].[FactDeviceCheckout]
    ADD DEFAULT ('00000000-0000-0000-0000-000000000000') FOR [AssignmentID];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDevice]...';


GO
ALTER TABLE [dbo].[DimDevice]
    ADD DEFAULT ('00000000-0000-0000-0000-000000000000') FOR [SourceID];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDevice]...';


GO
ALTER TABLE [dbo].[DimDevice]
    ADD DEFAULT ('') FOR [Name];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDevice]...';


GO
ALTER TABLE [dbo].[DimDevice]
    ADD DEFAULT ('') FOR [DeviceType];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDevice]...';


GO
ALTER TABLE [dbo].[DimDevice]
    ADD DEFAULT ('') FOR [SerialNumber];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDevice]...';


GO
ALTER TABLE [dbo].[DimDevice]
    ADD DEFAULT ('') FOR [VehicleID];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDevice]...';


GO
ALTER TABLE [dbo].[DimDevice]
    ADD DEFAULT ('') FOR [IPAddress];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDevice]...';


GO
ALTER TABLE [dbo].[DimDevice]
    ADD DEFAULT ('') FOR [MACAddress];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDevice]...';


GO
ALTER TABLE [dbo].[DimDevice]
    ADD DEFAULT ('') FOR [SoftwareVersion];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDevice]...';


GO
ALTER TABLE [dbo].[DimDevice]
    ADD DEFAULT ('') FOR [ConfigurationVersion];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDevice]...';


GO
ALTER TABLE [dbo].[DimDevice]
    ADD DEFAULT (getutcdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDevice]...';


GO
ALTER TABLE [dbo].[DimDevice]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactEventActivity]...';


GO
ALTER TABLE [dbo].[FactEventActivity]
    ADD DEFAULT ((-1)) FOR [RecordingEventID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactEventActivity]...';


GO
ALTER TABLE [dbo].[FactEventActivity]
    ADD DEFAULT ((-1)) FOR [ActivityDateID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactEventActivity]...';


GO
ALTER TABLE [dbo].[FactEventActivity]
    ADD DEFAULT ((-1)) FOR [ActivityTypeID];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimStorage]...';


GO
ALTER TABLE [dbo].[DimStorage]
    ADD DEFAULT ((-1)) FOR [SourceID];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimStorage]...';


GO
ALTER TABLE [dbo].[DimStorage]
    ADD DEFAULT ('') FOR [Name];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimStorage]...';


GO
ALTER TABLE [dbo].[DimStorage]
    ADD DEFAULT ('') FOR [Path];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimStorage]...';


GO
ALTER TABLE [dbo].[DimStorage]
    ADD DEFAULT ((0)) FOR [Size];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimStorage]...';


GO
ALTER TABLE [dbo].[DimStorage]
    ADD DEFAULT (getutcdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimStorage]...';


GO
ALTER TABLE [dbo].[DimStorage]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimEventCategory]...';


GO
ALTER TABLE [dbo].[DimEventCategory]
    ADD DEFAULT ((-1)) FOR [SourceID];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimEventCategory]...';


GO
ALTER TABLE [dbo].[DimEventCategory]
    ADD DEFAULT ('Unknown') FOR [Name];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimEventCategory]...';


GO
ALTER TABLE [dbo].[DimEventCategory]
    ADD DEFAULT ('0') FOR [DisplayIndex];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimEventCategory]...';


GO
ALTER TABLE [dbo].[DimEventCategory]
    ADD DEFAULT ('-1') FOR [RetentionDays];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimEventCategory]...';


GO
ALTER TABLE [dbo].[DimEventCategory]
    ADD DEFAULT ((0)) FOR [Critical];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimEventCategory]...';


GO
ALTER TABLE [dbo].[DimEventCategory]
    ADD DEFAULT (getutcdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimEventCategory]...';


GO
ALTER TABLE [dbo].[DimEventCategory]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactRecordingEvent]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD DEFAULT ('00000000-0000-0000-0000-000000000000') FOR [SourceID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactRecordingEvent]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD DEFAULT ((-1)) FOR [OfficerID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactRecordingEvent]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD DEFAULT ((-1)) FOR [StorageID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactRecordingEvent]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD DEFAULT ((-1)) FOR [DeviceID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactRecordingEvent]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD DEFAULT ((-1)) FOR [ImportReasonID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactRecordingEvent]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD DEFAULT ((-1)) FOR [RecordStartID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactRecordingEvent]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD DEFAULT ((-1)) FOR [DateCreatedID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactRecordingEvent]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD DEFAULT ((-1)) FOR [DateImportedID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactRecordingEvent]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD DEFAULT ('') FOR [ConfigurationVersion];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactRecordingEvent]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD DEFAULT ((0)) FOR [MinSpeed];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactRecordingEvent]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD DEFAULT ((0)) FOR [MaxSpeed];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [Date];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [Day];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [DaySuffix];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [Weekday];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [WeekDayName];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '0' FOR [IsWeekend];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '0' FOR [IsHoliday];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [HolidayText];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [DOWInMonth];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [DayOfYear];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [WeekOfMonth];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [WeekOfYear];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [ISOWeekOfYear];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [Month];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [MonthName];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [Quarter];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [QuarterName];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [Year];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [MMYYYY];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [YYYYMM];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [MonthYear];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [FirstDayOfMonth];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [LastDayOfMonth];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [FirstDayOfQuarter];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [LastDayOfQuarter];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [FirstDayOfYear];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [LastDayOfYear];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [FirstDayOfNextMonth];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimDate]...';


GO
ALTER TABLE [dbo].[DimDate]
    ADD DEFAULT '' FOR [FirstDayOfNextYear];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactDeviceActivity]...';


GO
ALTER TABLE [dbo].[FactDeviceActivity]
    ADD DEFAULT ((-1)) FOR [DeviceID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactDeviceActivity]...';


GO
ALTER TABLE [dbo].[FactDeviceActivity]
    ADD DEFAULT ((-1)) FOR [ActivityDateID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FactDeviceActivity]...';


GO
ALTER TABLE [dbo].[FactDeviceActivity]
    ADD DEFAULT ((-1)) FOR [ActivityTypeID];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimOfficer]...';


GO
ALTER TABLE [dbo].[DimOfficer]
    ADD DEFAULT ((-1)) FOR [SourceID];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimOfficer]...';


GO
ALTER TABLE [dbo].[DimOfficer]
    ADD DEFAULT ((-1)) FOR [ParentID];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimOfficer]...';


GO
ALTER TABLE [dbo].[DimOfficer]
    ADD DEFAULT ('') FOR [FirstName];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimOfficer]...';


GO
ALTER TABLE [dbo].[DimOfficer]
    ADD DEFAULT ('') FOR [LastName];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimOfficer]...';


GO
ALTER TABLE [dbo].[DimOfficer]
    ADD DEFAULT ('') FOR [MiddleName];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimOfficer]...';


GO
ALTER TABLE [dbo].[DimOfficer]
    ADD DEFAULT ('') FOR [Title];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimOfficer]...';


GO
ALTER TABLE [dbo].[DimOfficer]
    ADD DEFAULT ('') FOR [Badge];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimOfficer]...';


GO
ALTER TABLE [dbo].[DimOfficer]
    ADD DEFAULT (getutcdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[DimOfficer]...';


GO
ALTER TABLE [dbo].[DimOfficer]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [dbo].[FK_BridgeCaseItemInfoRecordingEvent_CaseItemInfoID]...';


GO
ALTER TABLE [dbo].[BridgeCaseItemInfoRecordingEvent]
    ADD CONSTRAINT [FK_BridgeCaseItemInfoRecordingEvent_CaseItemInfoID] FOREIGN KEY ([CaseItemInfoID]) REFERENCES [dbo].[FactCaseItemInfo] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BridgeCaseItemInfoRecordingEvent_RecordingEventID]...';


GO
ALTER TABLE [dbo].[BridgeCaseItemInfoRecordingEvent]
    ADD CONSTRAINT [FK_BridgeCaseItemInfoRecordingEvent_RecordingEventID] FOREIGN KEY ([RecordingEventID]) REFERENCES [dbo].[FactRecordingEvent] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BridgeEventCategory_EventCategoryID]...';


GO
ALTER TABLE [dbo].[BridgeEventCategory]
    ADD CONSTRAINT [FK_BridgeEventCategory_EventCategoryID] FOREIGN KEY ([EventCategoryID]) REFERENCES [dbo].[DimEventCategory] ([ID]);


GO
PRINT N'Creating [dbo].[FK_BridgeEventCategory_RecordingEventID]...';


GO
ALTER TABLE [dbo].[BridgeEventCategory]
    ADD CONSTRAINT [FK_BridgeEventCategory_RecordingEventID] FOREIGN KEY ([RecordingEventID]) REFERENCES [dbo].[FactRecordingEvent] ([ID]);


GO
PRINT N'Creating [dbo].[FK_FactDeviceCheckout_ActivityTypeID]...';


GO
ALTER TABLE [dbo].[FactDeviceCheckout]
    ADD CONSTRAINT [FK_FactDeviceCheckout_ActivityTypeID] FOREIGN KEY ([ActivityTypeID]) REFERENCES [dbo].[DimActivityType] ([ID]);


GO
PRINT N'Creating [dbo].[FK_FactDeviceCheckout_DateCheckedOutID]...';


GO
ALTER TABLE [dbo].[FactDeviceCheckout]
    ADD CONSTRAINT [FK_FactDeviceCheckout_DateCheckedOutID] FOREIGN KEY ([DateCheckedOutID]) REFERENCES [dbo].[DimDate] ([DateID]);


GO
PRINT N'Creating [dbo].[FK_FactDeviceCheckout_DeviceID]...';


GO
ALTER TABLE [dbo].[FactDeviceCheckout]
    ADD CONSTRAINT [FK_FactDeviceCheckout_DeviceID] FOREIGN KEY ([DeviceID]) REFERENCES [dbo].[DimDevice] ([ID]);


GO
PRINT N'Creating [dbo].[FK_FactDeviceCheckout_OfficerID]...';


GO
ALTER TABLE [dbo].[FactDeviceCheckout]
    ADD CONSTRAINT [FK_FactDeviceCheckout_OfficerID] FOREIGN KEY ([OfficerID]) REFERENCES [dbo].[DimOfficer] ([ID]);


GO
PRINT N'Creating [dbo].[FK_FactEventActivity_ActivityDateID]...';


GO
ALTER TABLE [dbo].[FactEventActivity]
    ADD CONSTRAINT [FK_FactEventActivity_ActivityDateID] FOREIGN KEY ([ActivityDateID]) REFERENCES [dbo].[DimDate] ([DateID]);


GO
PRINT N'Creating [dbo].[FK_FactEventActivity_ActivityTypeID]...';


GO
ALTER TABLE [dbo].[FactEventActivity]
    ADD CONSTRAINT [FK_FactEventActivity_ActivityTypeID] FOREIGN KEY ([ActivityTypeID]) REFERENCES [dbo].[DimActivityType] ([ID]);


GO
PRINT N'Creating [dbo].[FK_FactEventActivity_RecordingEventID]...';


GO
ALTER TABLE [dbo].[FactEventActivity]
    ADD CONSTRAINT [FK_FactEventActivity_RecordingEventID] FOREIGN KEY ([RecordingEventID]) REFERENCES [dbo].[FactRecordingEvent] ([ID]);


GO
PRINT N'Creating [dbo].[FK_FactRecordingEvent_DateCreatedID]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD CONSTRAINT [FK_FactRecordingEvent_DateCreatedID] FOREIGN KEY ([DateCreatedID]) REFERENCES [dbo].[DimDate] ([DateID]);


GO
PRINT N'Creating [dbo].[FK_FactRecordingEvent_DateImportedID]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD CONSTRAINT [FK_FactRecordingEvent_DateImportedID] FOREIGN KEY ([DateImportedID]) REFERENCES [dbo].[DimDate] ([DateID]);


GO
PRINT N'Creating [dbo].[FK_FactRecordingEvent_DeviceID]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD CONSTRAINT [FK_FactRecordingEvent_DeviceID] FOREIGN KEY ([DeviceID]) REFERENCES [dbo].[DimDevice] ([ID]);


GO
PRINT N'Creating [dbo].[FK_FactRecordingEvent_ImportReasonID]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD CONSTRAINT [FK_FactRecordingEvent_ImportReasonID] FOREIGN KEY ([ImportReasonID]) REFERENCES [dbo].[DimImportReason] ([ID]);


GO
PRINT N'Creating [dbo].[FK_FactRecordingEvent_OfficerID]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD CONSTRAINT [FK_FactRecordingEvent_OfficerID] FOREIGN KEY ([OfficerID]) REFERENCES [dbo].[DimOfficer] ([ID]);


GO
PRINT N'Creating [dbo].[FK_FactRecordingEvent_RecordStartID]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD CONSTRAINT [FK_FactRecordingEvent_RecordStartID] FOREIGN KEY ([RecordStartID]) REFERENCES [dbo].[DimDate] ([DateID]);


GO
PRINT N'Creating [dbo].[FK_FactRecordingEvent_StorageID]...';


GO
ALTER TABLE [dbo].[FactRecordingEvent]
    ADD CONSTRAINT [FK_FactRecordingEvent_StorageID] FOREIGN KEY ([StorageID]) REFERENCES [dbo].[DimStorage] ([ID]);


GO
PRINT N'Creating [dbo].[FK_FactDeviceActivity_ActivityDateID]...';


GO
ALTER TABLE [dbo].[FactDeviceActivity]
    ADD CONSTRAINT [FK_FactDeviceActivity_ActivityDateID] FOREIGN KEY ([ActivityDateID]) REFERENCES [dbo].[DimDate] ([DateID]);


GO
PRINT N'Creating [dbo].[FK_FactDeviceActivity_ActivityTypeID]...';


GO
ALTER TABLE [dbo].[FactDeviceActivity]
    ADD CONSTRAINT [FK_FactDeviceActivity_ActivityTypeID] FOREIGN KEY ([ActivityTypeID]) REFERENCES [dbo].[DimActivityType] ([ID]);


GO
PRINT N'Creating [dbo].[FK_FactDeviceActivity_DeviceID]...';


GO
ALTER TABLE [dbo].[FactDeviceActivity]
    ADD CONSTRAINT [FK_FactDeviceActivity_DeviceID] FOREIGN KEY ([DeviceID]) REFERENCES [dbo].[DimDevice] ([ID]);


GO
PRINT N'Creating [dbo].[FK_DimOfficer_Parent_ID]...';


GO
ALTER TABLE [dbo].[DimOfficer]
    ADD CONSTRAINT [FK_DimOfficer_Parent_ID] FOREIGN KEY ([ParentID]) REFERENCES [dbo].[DimOfficer] ([ID]);


GO
PRINT N'Creating [dbo].[fn_ConvertBytes]...';


GO


create function fn_ConvertBytes (@byte bigint) 
returns varchar(25) as
begin
	declare @response varchar(25)
	select 
		@response = case	
			when @byte > 1125899906842620 then cast(round(@byte / cast(1125899906842620 as float),1) as varchar(25)) + ' PB'
			when @byte > 1099511627776 then cast(round(@byte / cast(1099511627776 as float),1) as varchar(25)) + ' TB'
			when @byte > 1073741824 then cast(round(@byte / cast(1073741824 as float),1) as varchar(25)) + ' GB'
			when @byte > 1048576 then cast(round(@byte / cast(1048576 as float),1) as varchar(25)) + ' MB'
			when @byte > 1024 then cast(round(@byte / cast(1048576 as float),1) as varchar(25)) + ' KB'
			else cast(coalesce(@byte,0) as varchar(25)) + ' B'
		end

	return @response
end
GO
PRINT N'Creating [dbo].[fn_Split]...';


GO

-- =============================================
-- Create date: 02/26/10
-- Description:	Split function for SQL Server. Credit goes to:
-- http://www.logiclabz.com/sql-server/split-function-in-sql-server-to-break-comma-separated-strings-into-table.
-- =============================================
CREATE FUNCTION [dbo].[fn_Split]
	(
		@String varchar(8000),
		@Delimiter char(1) = ','
	)
RETURNS @temptable TABLE ([Name] VARCHAR(8000))
AS
BEGIN
    DECLARE @idx	INT,
			@slice	VARCHAR(8000)

    IF @String IS NULL OR LEN(@String) < 1
    RETURN

    SELECT @idx = 1
    WHILE @idx!= 0
    BEGIN
        SET @idx = CHARINDEX(@Delimiter, @String)
        IF @idx != 0
            SET @slice = LEFT(@String,@idx - 1)
        ELSE
            SET @slice = @String

        IF(LEN(@slice) > 0)
            INSERT INTO @temptable([Name]) VALUES (@slice)

        SET @String = RIGHT(@String, LEN(@String) - @idx)
        IF LEN(@String) = 0 break
    END
    RETURN
END
GO
PRINT N'Creating [dbo].[fn_getAllEventCategoriesById]...';


GO

create function fn_getAllEventCategoriesById(@EventCategoryID nvarchar(max)) 
returns @table table (EventCategoryID int)
as
begin
	insert into @table (EventCategoryID)
	select
		ID as EventCategoryID
	from
		DimEventCategory
	where
			SourceID in (
			select SourceID
			from DimEventCategory
			where ID in (select name from dbo.[fn_Split](@EventCategoryID,','))
		)

	return
end
GO
PRINT N'Creating [dbo].[fn_getAllOfficersById]...';


GO

create function fn_getAllOfficersById(@OfficerID nvarchar(max)) 
returns @table table (OfficerID int)
as
begin
	insert into @table (OfficerID)
	select
		ID as OfficerID
	from
		DimOfficer
	where
			SourceID in (
			select SourceID
			from DimOfficer
			where ID in (select name from dbo.[fn_Split](@OfficerID,','))
		)

	return
end
GO
PRINT N'Creating [dbo].[PurgeDateDeleted]...';


GO

create proc [dbo].PurgeDateDeleted as
begin
	set nocount on
	if OBJECT_ID('tempdb..#tables') is not null drop table #tables

	declare @dynSQL nvarchar(max) = ''

	select 
		TABLE_NAME
	into #tables
	from INFORMATION_SCHEMA.TABLES
	where
		TABLE_NAME in (select table_name from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'DateDeleted')

	select top 2147483647
		@dynSQL += delete_query + ' '+char(10)
	from 
		#tables ot
		cross apply (
		select 'delete from '+t.name+' where '+ c.name + ' in (select d.id from '+ot.TABLE_NAME+' d where d.DateDeleted is not null) ' as delete_query
		--t.name as TableWithForeignKey, fk.constraint_column_id as FK_PartNo , c.name as ForeignKeyColumn 
		from sys.foreign_key_columns as fk
		inner join sys.tables as t on fk.parent_object_id = t.object_id
		inner join sys.columns as c on fk.parent_object_id = c.object_id and fk.parent_column_id = c.column_id
		where fk.referenced_object_id = (select object_id from sys.tables where name = ot.TABLE_NAME) and ot.TABLE_NAME <> t.name	
		) as d1
	order by
		delete_query

	exec (@dynSQL)
	print (@dynSQL)
	set @dynSQL = ''

	select 
		@dynSQL += 'delete from '+ot.TABLE_NAME+' where DateDeleted is not null '+char(10)
	from 
		#tables ot


	exec (@dynSQL)
	print (@dynSQL)
	set @dynSQL = ''
end
GO
PRINT N'Creating [dbo].[PurgeFactRecordingEvent]...';


GO

create proc [dbo].PurgeFactRecordingEvent(@daysKeep int) as
begin
	if OBJECT_ID('tempdb..#RecordingEvent') is not null drop table #RecordingEvent

	declare @date date = getutcdate() - @daysKeep

	select
		ID as RecordingEventID
	into #RecordingEvent
	from
		FactRecordingEvent
	where
		RecordStart < @date
	order by
		RecordStart desc


	delete from
		BridgeEventCategory
	where
		RecordingEventID in (select re.RecordingEventID from #RecordingEvent re)


	delete from
		BridgeCaseItemInfoRecordingEvent
	where
		RecordingEventID in (select re.RecordingEventID from #RecordingEvent re)
	
	--
	delete from
		FactEventActivity
	where
		RecordingEventID in (select re.RecordingEventID from #RecordingEvent re)


	delete from
		FactRecordingEvent
	where
		id in (select re.RecordingEventID from #RecordingEvent re)
end
GO
PRINT N'Creating [dbo].[GetEventStatisticsByCategories]...';


GO


create proc [dbo].[GetEventStatisticsByCategories] (@days int, @officerIds nvarchar(max) = null, @eventCategoryIds nvarchar(max) = null) as
	begin

	declare @officer_count int = (select count(*) from dbo.[fn_Split](@officerIds,',')  where name > -2)
	declare @eventCategory_count int = (select count(*) from dbo.[fn_Split](@eventCategoryIds,',')  where name > -2)
	declare @minDate int = convert(varchar,dateadd(dd,(@days * -1),getutcdate()),112)
	declare @maxDate int = convert(varchar,getutcdate(),112)

	select 
		count(distinct fea.RecordingEventID) as DistinctCount, 
		count(fea.RecordingEventID) as [Count], 
		case	
			when dat.[Name] in ('Viewed') then 'Played'
			when dat.[Name] in ('Imported') then 'Uploaded'
			when dat.[Name] in ('Archived', 'Deleted') then 'Archived'
			else dat.[Name]
		end as ActivityType, 
		bec.EventCategoryID,
		e.SourceID as EventCatgorySourceID
	into #table
	from FactRecordingEvent fre
		inner join BridgeEventCategory bec on fre.ID = bec.RecordingEventID and bec.Active = 1
		inner join dbo.DimEventCategory e on e.ID = bec.EventCategoryID 
		inner join FactEventActivity fea on fre.ID = fea.RecordingEventID
		inner join DimActivityType dat on fea.ActivityTypeID = dat.ID
	where
		fea.ActivityDateID between @minDate and @maxDate and
		dat.ActivityCategory='Recording Event Audit Type' and dat.Name in ('Viewed', 'Exported', 'Archived', 'Imported', 'Deleted') and
		(case	
			when @officer_count = 0 then 1
			when fre.OfficerID in (select fd.OfficerID from dbo.fn_getAllOfficersById(@officerIds) fd) then 1
			else 0
		end) = 1 and
		(case	
			when @eventCategory_count = 0 then 1
			when bec.EventCategoryID in (select ec.EventCategoryID from dbo.[fn_getAllEventCategoriesById](@eventCategoryIds) ec) then 1
			else 0
		end) = 1
	group by 
		case	
			when dat.[Name] in ('Viewed') then 'Played'
			when dat.[Name] in ('Imported') then 'Uploaded'
			when dat.[Name] in ('Archived', 'Deleted') then 'Archived'
			else dat.[Name]
		end, bec.EventCategoryID,e.SourceID 

	select
		sum(case when ActivityType = 'Uploaded' then DistinctCount else [Count] end) as [Count], 
		ActivityType, 
		ec.[Id]
	from
		DimEventCategory ec
			inner join #table t on ec.SourceID = t.EventCatgorySourceID
	where
		ec.Active = 1
	group by
		ActivityType, 
		ec.[Id]		

	end
GO
PRINT N'Creating [dbo].[GetEventStatisticsByOfficers]...';


GO

create proc [dbo].[GetEventStatisticsByOfficers] (@days int, @officerIds nvarchar(max) = null, @eventCategoryIds nvarchar(max) = null) as
begin
	declare @officer_count int = (select count(*) from dbo.[fn_Split](@officerIds,',')  where name > -2)
	declare @eventCategory_count int = (select count(*) from dbo.[fn_Split](@eventCategoryIds,',')  where name > -2)
	declare @minDate int = convert(varchar,dateadd(dd,(@days * -1),getutcdate()),112)
	declare @maxDate int = convert(varchar,getutcdate(),112)

	select 
		count(distinct fea.RecordingEventID) as DistinctCount, 
		count(fea.RecordingEventID) as [Count], 
		case	
			when dat.[Name] in ('Viewed') then 'Played'
			when dat.[Name] in ('Imported') then 'Uploaded'
			when dat.[Name] in ('Archived', 'Deleted') then 'Archived'
			else dat.[Name]
		end as ActivityType, 
		f.ID as Id,
		f.SourceID as OfficerSourceID
	into #table
	from FactRecordingEvent fre
		inner join BridgeEventCategory bec on fre.ID = bec.RecordingEventID and bec.Active = 1
		inner join dbo.DimEventCategory e on e.ID = bec.EventCategoryID 
		inner join FactEventActivity fea on fre.ID = fea.RecordingEventID
		inner join DimActivityType dat on fea.ActivityTypeID = dat.ID
		inner join DimOfficer f on fre.OfficerID = f.ID
	where
		dat.ActivityCategory='Recording Event Audit Type' and dat.Name in ('Viewed', 'Exported', 'Archived', 'Imported', 'Deleted') and
		(case	
			when @officer_count = 0 then 1
			when fre.OfficerID in (select fd.OfficerID from dbo.fn_getAllOfficersById(@officerIds) fd) then 1
			else 0
		end) = 1 and
		(case	
			when @eventCategory_count = 0 then 1
			when bec.EventCategoryID in (select ec.EventCategoryID from dbo.[fn_getAllEventCategoriesById](@eventCategoryIds) ec) then 1
			else 0
		end) = 1 and
		fea.ActivityDateID between @minDate and @maxDate
	group by 
		case	
			when dat.[Name] in ('Viewed') then 'Played'
			when dat.[Name] in ('Imported') then 'Uploaded'
			when dat.[Name] in ('Archived', 'Deleted') then 'Archived'
			else dat.[Name]
		end, 
		f.ID, f.SourceID

	select
		sum(case when ActivityType = 'Uploaded' then DistinctCount else [Count] end) as [Count], 
		ActivityType, 
		f.[Id]
	from
		DimOfficer f
			inner join #table t on f.SourceID = t.OfficerSourceID
	where
		Active = 1
	group by
		ActivityType, 
		f.[Id]	
		

end
GO
PRINT N'Creating [dbo].[GetOfficerEventsMonthly]...';


GO


create proc [dbo].[GetOfficerEventsMonthly] (@days int = 1, @officerIds nvarchar(max) = null, @eventCategoryIds nvarchar(max) = null) as
begin
	declare @officer_count int = (select count(*) from dbo.[fn_Split](@officerIds,',')  where name > -2)
	declare @eventCategory_count int = (select count(*) from dbo.[fn_Split](@eventCategoryIds,',')  where name > -2)

	declare @minDate int = convert(varchar,dateadd(dd,(@days * -1),getutcdate()),112)
	declare @maxDate int = convert(varchar,getutcdate(),112)

	declare @EventCategories table (RecordingEventID int primary key,EventCategoryID int,Name varchar(128))

	insert into @EventCategories(RecordingEventID,EventCategoryID,Name)
	select
		bec.RecordingEventID,
		[dec].ID as EventCategoryID,
		[dec].Name
	from
		BridgeEventCategory bec 
			inner join DimEventCategory [dec] on bec.EventCategoryID = [dec].ID
	where
		bec.Active = 1 and
		[dec].Active = 1

	select 
		fre.RecordStartID,
		cast(cast(fre.RecordStartID as varchar) as datetime) as RecordStart,
		count(fre.ID) as [Count]
	into #table
	from
		FactRecordingEvent fre	
			inner join @EventCategories as d1 on fre.ID = d1.RecordingEventID
	where
		fre.RecordStartID between @minDate and @maxDate and
		(case	
			when @eventCategory_count = 0 then 1
			when d1.EventCategoryID in (select name from dbo.[fn_Split](@eventCategoryIds,',')) then 1
			else 0
		end) = 1 and
		(case	
			when @officer_count = 0 then 1
			when fre.OfficerID in (select name from dbo.[fn_Split](@officerIds,',')) then 1
			else 0
		end) = 1 	
	group by
		fre.RecordStartID,
		cast(cast(fre.RecordStartID as varchar) as datetime)


	select top 12 
		cast(cast(datepart(year,[Date]) as varchar(max)) + '-' + cast(datepart(month,[Date]) as varchar(max)) + '-01' as datetime) [date],
		sum(coalesce(t.[Count],0)) as [Count]
	from
		DimDate dd
			left join #table t on dd.DateID = t.RecordStartID
	where
		dd.DateID between @minDate and @maxDate 
	group by
		datepart(year,[Date]),
		datepart(month,[Date])
	order by
		datepart(year,[Date]) desc,
		datepart(month,[Date]) desc
end
GO
PRINT N'Creating [dbo].[GetOfficerEventsHourly]...';


GO

create proc GetOfficerEventsHourly (@days int = 1, @officerIds nvarchar(max) = null, @eventCategoryIds nvarchar(max) = null) as
begin
	declare @officer_count int = (select count(*) from dbo.[fn_Split](@officerIds,',') where name > -2)
	declare @eventCategory_count int = (select count(*) from dbo.[fn_Split](@eventCategoryIds,',') where name > -2)

	declare @minDate int = convert(varchar,dateadd(dd,(@days * -1),getutcdate()),112)
	declare @maxDate int = convert(varchar,getutcdate(),112)

	declare @Hours table (HourOfDay int) 
	declare @EventCategories table (RecordingEventID int primary key,EventCategoryID int,Name varchar(128))

	declare @inc int = 0
	while (select count(*) from @Hours) < 24
	begin
		insert into @Hours(HourOfDay) values(@inc)
		set @inc += 1
	end
		
	if OBJECT_ID('tempdb..#table') is not null drop table #table
	select 
		datepart(hour,fre.RecordStart) HourOfday,
		fre.ID as RecordingEventID
	into #table
	from
		FactRecordingEvent fre	
			inner join BridgeEventCategory bec on fre.ID = bec.RecordingEventID and bec.Active = 1
			inner join DimEventCategory [dec] on bec.EventCategoryID = [dec].ID
	where
		fre.RecordStartID between @minDate and @maxDate and
		(case	
			when @officer_count = 0 then 1
			when fre.OfficerID in (select fd.OfficerID from dbo.fn_getAllOfficersById(@officerIds) fd) then 1
			else 0
		end) = 1 and
		(case	
			when @eventCategory_count = 0 then 1
			when bec.EventCategoryID in (select ec.EventCategoryID from dbo.[fn_getAllEventCategoriesById](@eventCategoryIds) ec) then 1
			else 0
		end) = 1

	select
		count(distinct t.RecordingEventID) as TotalEvents,
		h.HourOfDay
	from
		@Hours h
			left join #table t on h.HourOfDay = t.HourOfday
	group by
		h.HourOfDay
	order by
		h.HourOfDay

end
GO
PRINT N'Creating [dbo].[GetEventCategorySummaries]...';


GO

create proc GetEventCategorySummaries (@days int = 1, @officerIds nvarchar(max) = null, @eventCategoryIds nvarchar(max) = null) as
begin
	declare @officer_count int = (select count(*) from dbo.[fn_Split](@officerIds,',')  where name > -2)
	declare @eventCategory_count int = (select count(*) from dbo.[fn_Split](@eventCategoryIds,',') where name > -2)

	declare @minDate int = convert(varchar,dateadd(dd,(@days * -1),getutcdate()),112)
	declare @maxDate int = convert(varchar,getutcdate(),112)

	select 
		[dec].ID as EventCategoryID,
		[dec].SourceID as EventCategorySourceID,
		fre.ID as RecordingEventID
	into #table
	from
		FactRecordingEvent fre	
			inner join BridgeEventCategory bec on fre.ID = bec.RecordingEventID and bec.Active = 1
			inner join DimEventCategory [dec] on bec.EventCategoryID = [dec].ID
	where
		fre.RecordStartID between @minDate and @maxDate and
		(case	
			when @officer_count = 0 then 1
			when fre.OfficerID in (select fd.OfficerID from dbo.fn_getAllOfficersById(@officerIds) fd) then 1
			else 0
		end) = 1 and
		(case	
			when @eventCategory_count = 0 then 1
			when bec.EventCategoryID in (select ec.EventCategoryID from dbo.[fn_getAllEventCategoriesById](@eventCategoryIds) ec) then 1
			else 0
		end) = 1		


	select top 40
		[dec].ID,
		null as OfficerId,
		[dec].Name + '' + case when Critical = 1 then '*' else '' end as Name,
		count(distinct RecordingEventID) as [Count]
	from
		DimEventCategory [dec]
			left join #table t on [dec].SourceID = t.EventCategorySourceID
	where
		Active = 1
	group by
		[dec].ID,
		[dec].Name + '' + case when Critical = 1 then '*' else '' end 
end
GO
PRINT N'Creating [dbo].[GetOfficerEventsDaily]...';


GO

create proc GetOfficerEventsDaily (@days int = 1, @officerIds nvarchar(max) = null, @eventCategoryIds nvarchar(max) = null) as
begin
	declare @officer_count int = (select count(*) from dbo.[fn_Split](@officerIds,',')  where name > -2)
	declare @eventCategory_count int = (select count(*) from dbo.[fn_Split](@eventCategoryIds,',')  where name > -2)

	declare @minDate int = convert(varchar,dateadd(dd,(@days * -1),getutcdate()),112)
	declare @maxDate int = convert(varchar,getutcdate(),112)

	select 
		fre.RecordStartID,
		cast(cast(fre.RecordStartID as varchar) as datetime) as RecordStart,
		fre.ID as RecordingEventID
	into #table
	from
		FactRecordingEvent fre	
			inner join BridgeEventCategory bec on fre.ID = bec.RecordingEventID and bec.Active = 1
			inner join DimEventCategory [dec] on bec.EventCategoryID = [dec].ID
	where
		fre.RecordStartID between @minDate and @maxDate and
		(case	
			when @officer_count = 0 then 1
			when fre.OfficerID in (select fd.OfficerID from dbo.fn_getAllOfficersById(@officerIds) fd) then 1
			else 0
		end) = 1 and
		(case	
			when @eventCategory_count = 0 then 1
			when bec.EventCategoryID in (select ec.EventCategoryID from dbo.[fn_getAllEventCategoriesById](@eventCategoryIds) ec) then 1
			else 0
		end) = 1	


	select
		dd.[Date],
		count(distinct t.RecordingEventID) as [Count]
	from
		DimDate dd
			left join #table t on dd.DateID = t.RecordStartID
	where
		dd.DateID between @minDate and @maxDate 
	group by
		dd.[Date]
	order by
		dd.[Date]
end
GO
PRINT N'Creating [dbo].[GetOfficerStatistics]...';


GO

create proc GetOfficerStatistics (@days int = 1, @officerIds nvarchar(max) = null, @eventCategoryIds nvarchar(max) = null) as
begin
	declare @officer_count int = (select count(*) from dbo.[fn_Split](@officerIds,','))
	declare @eventCategory_count int = (select count(*) from dbo.[fn_Split](@eventCategoryIds,','))

	declare @minDate int = convert(varchar,dateadd(dd,(@days * -1),getutcdate()),112)
	declare @maxDate int = convert(varchar,getutcdate(),112)

	select 
		fre.OfficerId,
		df.SourceID as OfficerSourceID,
		coalesce(bec.EventCategoryID,-1) as Id,
		coalesce([dec].Name,'Unknown') as Name,
		count(fre.ID) as [Count]
	into #table
	from
		FactRecordingEvent fre	
			inner join BridgeEventCategory bec on fre.ID = bec.RecordingEventID and bec.Active = 1
			inner join DimEventCategory [dec] on bec.EventCategoryID = [dec].ID
			inner join DimOfficer df on fre.OfficerID = df.ID
	where
		fre.RecordStartID between @minDate and @maxDate and
		(case	
			when @officer_count = 0 then 1
			when fre.OfficerID in (select fd.OfficerID from dbo.fn_getAllOfficersById(@officerIds) fd) then 1
			else 0
		end) = 1 and
		(case	
			when @eventCategory_count = 0 then 1
			when bec.EventCategoryID in (select ec.EventCategoryID from dbo.[fn_getAllEventCategoriesById](@eventCategoryIds) ec) then 1
			else 0
		end) = 1
	group by
		fre.OfficerId,
		df.SourceID,
		coalesce(bec.EventCategoryID,-1),
		coalesce([dec].Name,'Unknown') 


	select top 40
		OfficerSourceID,
		sum([Count]) as [Count]
	into #top_officers
	from
		#table T
	group by
		OfficerSourceID
	order by
		[Count] desc


	select
		df.Id,
		df.FirstName,
		df.LastName
	from
		DimOfficer df
			left join (select OfficerSourceID, sum([Count]) as [Count]  from #table group by OfficerSourceID) as dt on df.ID = dt.OfficerSourceID
	where
		df.Active = 1 and
		(case	
			when @officer_count = 0 and df.SourceID in (select d5.OfficerSourceID from #top_officers d5) then 1
			when df.ID in (select fd.OfficerID from dbo.fn_getAllOfficersById(@officerIds) fd) then 1
			else 0
		end) = 1 	
	order by
		[Count] desc
	
	select
		d1.EventCategoryId as Id,
		d1.Id as OfficerId,		
		d1.Name,
		sum(coalesce(t.[Count],0)) as [Count]
	from
		(
		select
			df.ID,
			df.SourceID as OfficerSourceID,
			df.FirstName,
			df.LastName,
			[dec].Id as EventCategoryId,
			[dec].Name + '' + case when Critical = 1 then '*' else '' end as Name
		from
			DimOfficer df, DimEventCategory [dec]
		where
			df.Active = 1 and
			[dec].Active = 1
		) as d1
			left join #table t on d1.OfficerSourceID = t.OfficerSourceID and t.Id = d1.EventCategoryId
	where
		(case	
			when @officer_count = 0 and d1.OfficerSourceID in (select d5.OfficerSourceID from #top_officers d5) then 1
			when d1.ID in (select fd.OfficerID from dbo.fn_getAllOfficersById(@officerIds) fd) then 1
			else 0
		end) = 1 	
	group by
		d1.EventCategoryId,
		d1.Id,		
		d1.Name

	select 
		count (Distinct OfficerSourceID) as OfficerCount, 
		Sum([Count]) as CategoryCount 
	from 
		#table
	where
		(case	
			when @officer_count = 0 then 1
			when OfficerID in (select fd.OfficerID from dbo.fn_getAllOfficersById(@officerIds) fd) then 1
			else 0
		end) = 1 
end
GO
PRINT N'Creating [dbo].[GetRecordingEvent]...';


GO


create proc GetRecordingEvent (@days int = 1, @officerIds nvarchar(max) = null, @eventCategoryIds nvarchar(max) = null, @bounds nvarchar(max) = null) as
begin
	declare @officer_count int = (select count(*) from dbo.[fn_Split](@officerIds,','))
	declare @eventCategory_count int = (select count(*) from dbo.[fn_Split](@eventCategoryIds,','))

	declare @minDate int = convert(varchar,dateadd(dd,(@days * -1),getutcdate()),112)
	declare @maxDate int = convert(varchar,getutcdate(),112)
	
	declare @boundTable table (id int identity(1,1), coord float, position varchar(5))

	insert into @boundTable(coord) 
	select name from dbo.[fn_Split](@bounds,',')
	update @boundTable
	set
		position = case 
						when id = 1 then 'South'
						when id = 2 then 'West'
						when id = 3 then 'North'
						when id = 4 then 'East'
					end

	select top 1000
		f.ID as Id,
		f.FirstName,
		f.LastName,
		[dec].ID as Id,
		[dec].Name as Name,
		fre.ID as Id,
		fre.Duration,
		fre.DateCreated as CreatedDate,
		fre.RecordStart as RecordingStartDate,
		fre.RecordStop as RecordingStopDate,
		fre.MinLongitude as Longitude,
		fre.MinLatitude as Latitude
	from
		FactRecordingEvent fre	
			inner join BridgeEventCategory bec on fre.ID = bec.RecordingEventID and bec.Active = 1
			inner join 
			(
				select
					eci.ID,
					eci.Name + '' + case when eci.Critical = 1 then '*' else '' end as Name,
					t.ID as AllEventCategoryID
				from
					DimEventCategory eci
						inner join DimEventCategory t on eci.SourceID = t.SourceID
				where
					eci.Active = 1 
			) as [dec] on bec.EventCategoryID = [dec].AllEventCategoryID
			inner join 
			(
				select
					fi.ID,
					fi.FirstName,
					fi.LastName,
					t.ID as AllOfficerID
				from
					DimOfficer fi
						inner join DimOfficer t on fi.SourceID = t.SourceID
				where
					fi.Active = 1 	
			) as f on fre.OfficerID = f.AllOfficerID
	where
		--fre.ID in (5272,12297) and
		MinLatitude > coalesce((select coord from @boundTable where position = 'South'),MinLatitude-cast(1 as float)) and
		MinLatitude < coalesce((select coord from @boundTable where position = 'North'),MinLatitude+cast(1 as float)) and
		MinLongitude > coalesce((select coord from @boundTable where position = 'West'),MinLongitude-cast(1 as float)) and
		MinLongitude < coalesce((select coord from @boundTable where position = 'East'),MinLongitude+cast(1 as float)) and			
		fre.RecordStartID between @minDate and @maxDate and
		/*** DO WE WANT FILTER OUT MISSING GPS? **/
		--MinLatitude <> '' and
		--MinLongitude <> '' and
		(case	
			when @eventCategory_count = 0 then 1
			when bec.EventCategoryID in (select ec.EventCategoryID from dbo.[fn_getAllEventCategoriesById](@eventCategoryIds) ec) then 1
			else 0
		end) = 1  and
		(case	
			when @officer_count = 0 then 1
			when fre.OfficerID in (select fd.OfficerID from dbo.fn_getAllOfficersById(@officerIds) fd) then 1
			else 0
		end) = 1 	

	order by
		RecordingStartDate desc
end
GO
PRINT N'Creating [dbo].[GetRecordingEventStatistics]...';


GO

create proc GetRecordingEventStatistics (@days int, @officerIds nvarchar(max) = null, @eventCategoryIds nvarchar(max) = null) as
begin

	declare @officer_count int = (select count(*) from dbo.[fn_Split](@officerIds,',')  where name > -2)
	declare @eventCategory_count int = (select count(*) from dbo.[fn_Split](@eventCategoryIds,',') where name > -2)

	declare @minDate int = convert(varchar,dateadd(dd,(@days * -1),getutcdate()),112)
	declare @maxDate int = convert(varchar,getutcdate(),112)

	declare @CategoryCount int
	declare @OfficerCount int
	declare @CasesCreated  int = 0
	declare @DurationCritical int
	declare @DurationNonCritical int
	declare @PlayedCritical int
	declare @PlayedNonCritical int
	declare @Shares int
	declare @UpcomingDeletionsCritical int
	declare @UpcomingDeletionsNonCritical int
	declare @UploadedCritical int
	declare @UploadedNonCritical int
	declare @UploadedSizeCritical bigint
	declare @UploadedSizeNonCritical bigint
	declare @UploadedUnknown int


	select
		@CasesCreated = COUNT(*)
	from
		[FactCaseItemInfo]
	where
		convert(varchar,CaseCreated,112) between @minDate and @maxDate

	select
		@UpcomingDeletionsCritical = count(distinct (case when [dec].Critical = 1 then fre.ID end)),
		@UpcomingDeletionsNonCritical = count(distinct (case when [dec].Critical = 0 then fre.ID end))
	from
		FactRecordingEvent fre
			inner join BridgeEventCategory bec on fre.ID = bec.RecordingEventID and bec.Active = 1
			inner join DimEventCategory [dec] on bec.EventCategoryID = [dec].ID
	where
		RetentionDays > 0 and
		DATEADD(day,[dec].RetentionDays,fre.DateImported) between GETUTCDATE() and DATEADD(day,7,GETUTCDATE())

	select
		fae.ActivityTypeID,
		dat.ActivityCategory,
		dat.Name as ActivityName,
		case when ec.Critical = 1 then fae.RecordingEventID end as Critical,
		case when ec.Critical = 0 then fae.RecordingEventID end as NonCritical,
		fae.ID,
		fae.RecordingEventID,
		ec.EventCategoryID,
		ec.Name as EventCategoryName,
		ec.Critical as CriticalBit,
		OfficerID = (select OfficerID from FactRecordingEvent fre where fae.RecordingEventID = fre.ID),
		RecordingEventDuration = (select Duration from FactRecordingEvent fre where fae.RecordingEventID = fre.ID),
		RecordingEventSize = (select Size from FactRecordingEvent fre where fae.RecordingEventID = fre.ID)
	into #EventActivityStats
	from	
		FactEventActivity fae
			inner join DimActivityType dat on fae.ActivityTypeID = dat.ID
			left join (
				select
					bec1.ID,
					bec1.EventCategoryID,
					bec1.RecordingEventID,
					[dec1].Name,
					[dec1].Critical
				from
					BridgeEventCategory bec1
						inner join DimEventCategory [dec1] on bec1.EventCategoryID = [dec1].ID
				where
					 bec1.Active = 1		
			) ec on fae.RecordingEventID = ec.RecordingEventID
	where
		dat.ActivityCategory = 'Recording Event Audit Type' and
		dat.Name in ('Imported','Viewed','Exported','Archived','Shared', 'Deleted') and
		ActivityDateID between @minDate and @maxDate

	select
		@PlayedCritical = count(case when ActivityName = 'Viewed' then Critical end),
		@PlayedNonCritical = count(case when ActivityName = 'Viewed' then NonCritical end),
		@Shares = count(case when ActivityName = 'Shared' then Critical end) +
				 count(case when ActivityName = 'Shared' then NonCritical end)
	from
		#EventActivityStats
	where
		(case	
			when @eventCategory_count = 0 then 1
			when EventCategoryID in (select ec.EventCategoryID from dbo.[fn_getAllEventCategoriesById](@eventCategoryIds) ec) then 1
			else 0
		end) = 1  and
		(case	
			when @officer_count = 0 then 1
			when OfficerID in (select fd.OfficerID from dbo.fn_getAllOfficersById(@officerIds) fd) then 1
			else 0
		end) = 1 

	select
		@DurationCritical = sum(case when Critical = 1 then abs(RecordingEventDuration) else 0 end),
		@DurationNonCritical = sum(case when CriticalBit = 0 then abs(RecordingEventDuration) else 0 end),
		@UploadedSizeCritical = sum(case when CriticalBit = 1 then abs(RecordingEventSize) else 0 end),
		@UploadedSizeNonCritical = sum(case when CriticalBit = 0 then abs(RecordingEventSize) else 0 end),
		@UploadedCritical = count(distinct Critical),
		@UploadedNonCritical = count(distinct NonCritical),
		@UploadedUnknown = count(distinct case when EventCategoryName = 'Unknown' then NonCritical end) +
							count(distinct case when EventCategoryName = 'Unknown' then Critical end)
	from
		(
		select	
			RecordingEventID,
			RecordingEventDuration,
			RecordingEventSize,
			Critical,
			NonCritical,
			EventCategoryName,
			CriticalBit,
			ROW_NUMBER() over(partition by RecordingEventID order by RecordingEventID) as keep1
		from
			#EventActivityStats
		where
			 ActivityName = 'Imported' and
			(case	
				when @eventCategory_count = 0 then 1
				when EventCategoryID in (select ec.EventCategoryID from dbo.[fn_getAllEventCategoriesById](@eventCategoryIds) ec) then 1
				else 0
			end) = 1  and
			(case	
				when @officer_count = 0 then 1
				when OfficerID in (select fd.OfficerID from dbo.fn_getAllOfficersById(@officerIds) fd) then 1
				else 0
			end) = 1 
		) as d1
	where
		keep1 = 1


	select
		@CategoryCount = count(fre.ID),
		@OfficerCount = count(distinct f.SourceID)  -- SourceID in case the officer has two different ID's
	from
		FactRecordingEvent fre
			inner join BridgeEventCategory bec on fre.ID = bec.RecordingEventID and bec.Active = 1
			inner join DimEventCategory [dec] on bec.EventCategoryID = [dec].ID
			inner join DimOfficer f on f.ID = fre.OfficerID
	where
		fre.RecordStartID between @minDate and @maxDate and
		(case	
			when @eventCategory_count = 0 then 1
			when bec.EventCategoryID in (select ec.EventCategoryID from dbo.[fn_getAllEventCategoriesById](@eventCategoryIds) ec) then 1
			else 0
		end) = 1  and
		(case	
			when @officer_count = 0 then 1
			when fre.OfficerID in (select fd.OfficerID from dbo.fn_getAllOfficersById(@officerIds) fd) then 1
			else 0
		end) = 1 	

	select 
		CategoryCount = coalesce(@CategoryCount,0),
		OfficerCount = coalesce(@OfficerCount,0),
		CasesCreated = coalesce(@CasesCreated,0),
		DurationCritical = coalesce(round(@DurationCritical / 60 / cast(60 as float),0),0),  -- THIS IS RETURNING HOURS
		DurationNonCritical = coalesce(round(@DurationNonCritical / 60 / cast(60 as float),0),0),  -- THIS IS RETURNING HOURS
		PlayedCritical = coalesce(@PlayedCritical,0),
		PlayedNonCritical = coalesce(@PlayedNonCritical,0),
		Shares = coalesce(@Shares,0),
		UpcomingDeletionsCritical = coalesce(@UpcomingDeletionsCritical,0),
		UpcomingDeletionsNonCritical = coalesce(@UpcomingDeletionsNonCritical,0),
		UploadedCritical = coalesce(@UploadedCritical,0),
		UploadedNonCritical = coalesce(@UploadedNonCritical,0),
		UploadedSizeCritical = dbo.fn_ConvertBytes(@UploadedSizeCritical),
		UploadedSizeNonCritical = dbo.fn_ConvertBytes(@UploadedSizeNonCritical),
		UploadedSizeTotal = dbo.fn_ConvertBytes(@UploadedSizeCritical + @UploadedSizeNonCritical),
		UploadedUnknown = coalesce(@UploadedUnknown,0)
end
GO
PRINT N'Creating [dbo].[GetActivityFeed]...';


GO


create proc GetActivityFeed (@days int = 1) as
begin
	select top 10
		f.ID as Id,
		f.FirstName,
		f.LastName,
		fre.ID as Id,
		fre.Duration,
		fre.DateCreated as CreatedDate,
		fre.RecordStart as RecordingStartDate,
		fre.RecordStop as RecordingStopDate,
		coalesce(d1.Name,'Unknown') as CategoryName
	from
		FactRecordingEvent fre	
			inner join DimOfficer f on fre.OfficerID = f.ID and f.Active = 1
			left join (
				select
					bec.RecordingEventID,
					[dec].Name
				from
					BridgeEventCategory bec 
						inner join DimEventCategory [dec] on bec.EventCategoryID = [dec].ID
				where
					bec.Active = 1 and
					[dec].Active = 1
			) as d1 on fre.ID = d1.RecordingEventID
	order by
		RecordingStartDate desc
end
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/



ALTER DATABASE [$(DatabaseName)] MODIFY FILE (NAME='$(DatabaseName)', FILEGROWTH = 256MB)

ALTER DATABASE [$(DatabaseName)] MODIFY FILE (NAME='$(DatabaseName)_log', FILEGROWTH = 128MB)





set identity_insert DimOfficer on
	insert into DimOfficer(ID) Values(-1)
set identity_insert DimOfficer off
GO

set identity_insert DimEventCategory on
	insert into DimEventCategory(ID) Values(-1)
set identity_insert DimEventCategory off
GO

set identity_insert DimStorage on
	insert into DimStorage(ID) Values(-1)
set identity_insert DimStorage off
GO

set identity_insert DimDevice on
	insert into DimDevice(ID) Values(-1)
set identity_insert DimDevice off
GO

set identity_insert DimActivityType on
	insert into DimActivityType(ID) Values(-1)
set identity_insert DimActivityType off
GO

set identity_insert DimImportReason on
	insert into DimImportReason(ID) Values(-1)
set identity_insert DimImportReason off
GO

INSERT INTO DimDate(DateID) VALUES(-1)
GO

if object_id('tempdb..#source') is not null drop table #source
GO

create table #source (
	SourceID [int] not null default -1,
	ActivityCategory [varchar](50) NOT NULL DEFAULT '',
	Name [varchar](50) NOT NULL DEFAULT '',
	StagingStatus varchar(1)
)

insert into #source([ActivityCategory],[Name],[SourceID]) 
values
	('Recording Event Audit Type','Imported',0),
	('Recording Event Audit Type','Recovered',1),
	('Recording Event Audit Type','Exported',2),
	('Recording Event Audit Type','Archived',3),
	('Recording Event Audit Type','Deleted',4),
	('Recording Event Audit Type','Restored',5),
	('Recording Event Audit Type','LoggedIn',6),
	('Recording Event Audit Type','LogInAttempted',7),
	('Recording Event Audit Type','Viewed',8),
	('Recording Event Audit Type','Modified',9),
	('Recording Event Audit Type','BulkImported',10),
	('Recording Event Audit Type','Created',11),
	('Recording Event Audit Type','Uploaded',12),
	('Recording Event Audit Type','Shared',13),
	('Recording Event Audit Type','Concatenated',14),
	('Recording Event Audit Type','Transcoded',15),
	('Recording Event Audit Type','Edited',16),
	('Recording Event Audit Type','Enabled',17),
	('Recording Event Audit Type','Disabled',18),
	('Recording Event Audit Type','Downloaded',19),
	('Recording Event Audit Type','Forwarded',20),
	('Recording Event Audit Type','Played',21),
	('Recording Event Audit Type','Started',22),
	('Recording Event Audit Type','Unshared',23),
	('Recording Event Audit Type','Logout',24),
	('Recording Event Audit Type','Lockout',25),
	('Recording Event Audit Type','PasswordReset',26),
	('Recording Event Audit Type','CloudUploaded',27),
	('Recording Event Audit Type','General',28),
	('Recording Event Audit Type','Move',29),

	('Recording Event Status','NotSet',0),
	('Recording Event Status','Importing',1),
	('Recording Event Status','Online',2),
	('Recording Event Status','Partial',3),
	('Recording Event Status','ArchivePending',4),
	('Recording Event Status','Archived',5),
	('Recording Event Status','RestorePending',6),
	('Recording Event Status','Restored',7),
	('Recording Event Status','PurgePending',8),
	('Recording Event Status','Purged',9),
	('Recording Event Status','Faulted',32767),

	('Recording Event User Online Status','DefaultRetentionPolicy',0),
	('Recording Event User Online Status','KeepOnline',1),
	('Recording Event User Online Status','EnsureArchived',2),
	('Device Activity','DeviceCheckout',214748365)

	insert into WGReport.dbo.DimActivityType([ActivityCategory],[Name],[SourceID]) 
	select
		s.[ActivityCategory],
		s.[Name],
		s.[SourceID]
	from
		#source s
			left join WGReport.dbo.DimActivityType t on 
						s.SourceID = t.SourceID and
						s.ActivityCategory = t.ActivityCategory
	where
		t.SourceID is null
GO

if object_id('tempdb..#source') is not null drop table #source
GO

create table #source (
	SourceID [int] not null default -1,
	Name [varchar](50) NOT NULL DEFAULT '',
	StagingStatus varchar(1)
)

insert into #source([Name],[SourceID]) 
values
	('NoMediaImported',0),
	('CriticalRule',1),
	('UserSpecified',2),
	('UserImportedAsCritical',4),
	('UserPurged',8),
	('NoInteraction',16),
	('XmlErrors',32),
	('MtdErrors',64),
	('Partial',128),
	('Recovery',256),
	('OfficerPurgeDenied',512),
	('InsufficientVideo',1024),
	('Restore',2048),
	('Remote',4096),
	('Online',8192)



	/*************************************************************************************************************************************************************/
	/*** INSERT ALL THE NEW DATA **/
	/*************************************************************************************************************************************************************/

	insert into WGReport.dbo.DimImportReason([Name],[SourceID]) 
	select
		s.[Name],
		s.[SourceID]
	from
		#source s
			left join WGReport.dbo.DimImportReason t on 
						s.SourceID = t.SourceID 
	where
		t.SourceID is null

	
if object_id('tempdb..#source') is not null drop table #source
GO

MERGE INTO LogType AS TARGET
USING (VALUES
	(2, 'Error'),
	(4, 'Warning'),
	(8, 'Information'),
	(16, 'Debug')
)
AS Source (Id, Name) ON Target.Id = Source.Id
WHEN MATCHED THEN UPDATE SET [Name]=Source.[Name]
WHEN NOT MATCHED THEN INSERT (Id, Name) VALUES (Source.Id, Source.Name)
WHEN NOT MATCHED BY Source THEN DELETE;

if OBJECT_ID('tempdb..#dim') is not null drop table #dim

DECLARE @StartDate DATE = '20000101', @NumberOfYears INT = 50

-- prevent set or regional settings from interfering with 
-- interpretation of dates / literals


SET DATEFIRST 7;
SET DATEFORMAT mdy;
SET LANGUAGE US_ENGLISH;

DECLARE @CutoffDate DATE = DATEADD(YEAR, @NumberOfYears, @StartDate);

-- this is just a holding table for intermediate calculations:

CREATE TABLE #dim
(
  [date]       DATE PRIMARY KEY, 
  [day]        AS DATEPART(DAY,      [date]),
  [month]      AS DATEPART(MONTH,    [date]),
  FirstOfMonth AS CONVERT(DATE, DATEADD(MONTH, DATEDIFF(MONTH, 0, [date]), 0)),
  [MonthName]  AS DATENAME(MONTH,    [date]),
  [week]       AS DATEPART(WEEK,     [date]),
  [ISOweek]    AS DATEPART(ISO_WEEK, [date]),
  [DayOfWeek]  AS DATEPART(WEEKDAY,  [date]),
  [quarter]    AS DATEPART(QUARTER,  [date]),
  [year]       AS DATEPART(YEAR,     [date]),
  FirstOfYear  AS CONVERT(DATE, DATEADD(YEAR,  DATEDIFF(YEAR,  0, [date]), 0)),
  Style112     AS CONVERT(CHAR(8),   [date], 112),
  Style101     AS CONVERT(CHAR(10),  [date], 101)
);

-- use the catalog views to generate as many rows as we need

INSERT #dim([date]) 
SELECT d
FROM
(
  SELECT d = DATEADD(DAY, rn - 1, @StartDate)
  FROM 
  (
    SELECT TOP (DATEDIFF(DAY, @StartDate, @CutoffDate)) 
      rn = ROW_NUMBER() OVER (ORDER BY s1.[object_id])
    FROM sys.all_objects AS s1
    CROSS JOIN sys.all_objects AS s2
    -- on my system this would support > 5 million days
    ORDER BY s1.[object_id]
  ) AS x
) AS y;



INSERT dbo.DimDate WITH (TABLOCKX)
SELECT
  DateId       = CONVERT(INT, Style112),
  [Date]        = [date],
  [Day]         = CONVERT(TINYINT, [day]),
  DaySuffix     = CONVERT(CHAR(2), CASE WHEN [day] / 10 = 1 THEN 'th' ELSE 
                  CASE RIGHT([day], 1) WHEN '1' THEN 'st' WHEN '2' THEN 'nd' 
	              WHEN '3' THEN 'rd' ELSE 'th' END END),
  [Weekday]     = CONVERT(TINYINT, [DayOfWeek]),
  [WeekDayName] = CONVERT(VARCHAR(10), DATENAME(WEEKDAY, [date])),
  [IsWeekend]   = CONVERT(BIT, CASE WHEN [DayOfWeek] IN (1,7) THEN 1 ELSE 0 END),
  [IsHoliday]   = CONVERT(BIT, 0),
  HolidayText   = '',
  [DOWInMonth]  = CONVERT(TINYINT, ROW_NUMBER() OVER 
                  (PARTITION BY FirstOfMonth, [DayOfWeek] ORDER BY [date])),
  [DayOfYear]   = CONVERT(SMALLINT, DATEPART(DAYOFYEAR, [date])),
  WeekOfMonth   = CONVERT(TINYINT, DENSE_RANK() OVER 
                  (PARTITION BY [year], [month] ORDER BY [week])),
  WeekOfYear    = CONVERT(TINYINT, [week]),
  ISOWeekOfYear = CONVERT(TINYINT, ISOWeek),
  [Month]       = CONVERT(TINYINT, [month]),
  [MonthName]   = CONVERT(VARCHAR(10), [MonthName]),
  [Quarter]     = CONVERT(TINYINT, [quarter]),
  QuarterName   = CONVERT(VARCHAR(6), CASE [quarter] WHEN 1 THEN 'First' 
                  WHEN 2 THEN 'Second' WHEN 3 THEN 'Third' WHEN 4 THEN 'Fourth' END), 
  [Year]        = [year],
  MMYYYY        = CONVERT(CHAR(6), LEFT(Style101, 2)    + LEFT(Style112, 4)),
  YYYYMM        = cast(datepart(year,[Date]) as varchar(4)) + '' + right('00'+cast(datepart(month,[Date]) as varchar(4)),2),
  MonthYear     = CONVERT(CHAR(7), LEFT([MonthName], 3) + LEFT(Style112, 4)),
  FirstDayOfMonth     = FirstOfMonth,
  LastDayOfMonth      = MAX([date]) OVER (PARTITION BY [year], [month]),
  FirstDayOfQuarter   = MIN([date]) OVER (PARTITION BY [year], [quarter]),
  LastDayOfQuarter    = MAX([date]) OVER (PARTITION BY [year], [quarter]),
  FirstDayOfYear      = FirstOfYear,
  LastDayOfYear       = MAX([date]) OVER (PARTITION BY [year]),
  FirstDayOfNextMonth = DATEADD(MONTH, 1, FirstOfMonth),
  FirstDayOfNextYear  = DATEADD(YEAR,  1, FirstOfYear)
FROM #dim
OPTION (MAXDOP 1);


;WITH x AS 
(
  SELECT DateId, [Date], IsHoliday, HolidayText, FirstDayOfYear,
    DOWInMonth, [MonthName], [WeekDayName], [Day],
    LastDOWInMonth = ROW_NUMBER() OVER 
    (
      PARTITION BY FirstDayOfMonth, [Weekday] 
      ORDER BY [Date] DESC
    )
  FROM dbo.DimDate
)
UPDATE x SET IsHoliday = 1, HolidayText = CASE
  WHEN ([Date] = FirstDayOfYear) 
    THEN 'New Year''s Day'
  WHEN ([DOWInMonth] = 3 AND [MonthName] = 'January' AND [WeekDayName] = 'Monday')
    THEN 'Martin Luther King Day'    -- (3rd Monday in January)
  WHEN ([DOWInMonth] = 3 AND [MonthName] = 'February' AND [WeekDayName] = 'Monday')
    THEN 'President''s Day'          -- (3rd Monday in February)
  WHEN ([LastDOWInMonth] = 1 AND [MonthName] = 'May' AND [WeekDayName] = 'Monday')
    THEN 'Memorial Day'              -- (last Monday in May)
  WHEN ([MonthName] = 'July' AND [Day] = 4)
    THEN 'Independence Day'          -- (July 4th)
  WHEN ([DOWInMonth] = 1 AND [MonthName] = 'September' AND [WeekDayName] = 'Monday')
    THEN 'Labour Day'                -- (first Monday in September)
  WHEN ([DOWInMonth] = 2 AND [MonthName] = 'October' AND [WeekDayName] = 'Monday')
    THEN 'Columbus Day'              -- Columbus Day (second Monday in October)
  WHEN ([MonthName] = 'November' AND [Day] = 11)
    THEN 'Veterans'' Day'            -- Veterans' Day (November 11th)
  WHEN ([DOWInMonth] = 4 AND [MonthName] = 'November' AND [WeekDayName] = 'Thursday')
    THEN 'Thanksgiving Day'          -- Thanksgiving Day (fourth Thursday in November)
  WHEN ([MonthName] = 'December' AND [Day] = 25)
    THEN 'Christmas Day'
  WHEN ([MonthName] = 'March' AND [Day] = 17) THEN 'St Patricks Day'
  END
WHERE 
  ([Date] = FirstDayOfYear)
  OR ([DOWInMonth] = 3     AND [MonthName] = 'January'   AND [WeekDayName] = 'Monday')
  OR ([DOWInMonth] = 3     AND [MonthName] = 'February'  AND [WeekDayName] = 'Monday')
  OR ([LastDOWInMonth] = 1 AND [MonthName] = 'May'       AND [WeekDayName] = 'Monday')
  OR ([MonthName] = 'July' AND [Day] = 4)
  OR ([DOWInMonth] = 1     AND [MonthName] = 'September' AND [WeekDayName] = 'Monday')
  OR ([DOWInMonth] = 2     AND [MonthName] = 'October'   AND [WeekDayName] = 'Monday')
  OR ([MonthName] = 'November' AND [Day] = 11)
  OR ([DOWInMonth] = 4     AND [MonthName] = 'November' AND [WeekDayName] = 'Thursday')
  OR ([MonthName] = 'December' AND [Day] = 25)
  OR ([MonthName] = 'March' AND [Day] = 17)

GO

DECLARE @dynSQL NVARCHAR(max);
set @dynSQL = ''

SELECT top 2147483647
	@dynSQL += '
CREATE USER ['+name+'] FOR LOGIN ['+name+']
ALTER ROLE [db_owner] ADD MEMBER ['+name+']
' 
FROM master.sys.sysusers s
		inner join (
			SELECT sys.server_role_members.role_principal_id, role.name AS RoleName,   
				sys.server_role_members.member_principal_id, member.name AS MemberName  
			FROM sys.server_role_members  
			JOIN sys.server_principals AS role  
				ON sys.server_role_members.role_principal_id = role.principal_id  
			JOIN sys.server_principals AS member  
				ON sys.server_role_members.member_principal_id = member.principal_id 
			where role.name = 'sysadmin'
		) as d1 on s.name = d1.MemberName
where 
	s.name not in (select name from $(WGReportDb).sys.database_principals) and
	issqlrole = 0 and	--  SQL Role
	isntname  = 1 and	--	Account is a Windows group or Windows user.
	(
	SELECT 1 as DBUserExists --su.name as DatabaseUser,
	FROM sys.sysusers su
	join sys.syslogins sl on sl.sid = su.sid
	where sl.name = s.name -- login	
	) is null
--	isntgroup = 1		--	Account is a Windows group.
--  isntuser  = 1		--  Account is a Windows user.
--  isapprole = 1		--  Account is an application role.

exec(@dynSQL)
print @dynSQL
GO
if(select count(*) from sys.databases where name = 'WGEvidenceLibrary_CD') > 0
begin
	exec ('	
	use WGEvidenceLibrary_CD
	declare @dynSQL nvarchar(max) = ''''
	set @dynSQL += ''-------------------------------------------------------------------------------------------------------''+CHAR(10)
	set @dynSQL += ''-- SCHEMA ETL VIEW OR TABLE''+CHAR(10)
	set @dynSQL += ''-------------------------------------------------------------------------------------------------------''+CHAR(10)
	select top 2000000000
	@dynSQL += '' drop ''+case when TABLE_TYPE = ''View'' then ''View'' else ''Table'' end+'' ''+TABLE_SCHEMA+''.''+TABLE_NAME+char(10)
	from INFORMATION_SCHEMA.TABLES
	where TABLE_SCHEMA = ''ETL''  

	exec (@dynSQL)
	print (@dynSQL)
	set @dynSQL = ''''

	set @dynSQL += ''-------------------------------------------------------------------------------------------------------''+CHAR(10)
	set @dynSQL += ''-- VIEW OR TABLE like ETL ''+CHAR(10)
	set @dynSQL += ''-------------------------------------------------------------------------------------------------------''+CHAR(10)
	select top 2000000000
	@dynSQL += '' drop ''+case when TABLE_TYPE = ''View'' then ''View'' else ''Table'' end+'' ''+TABLE_SCHEMA+''.''+TABLE_NAME+char(10)
	from INFORMATION_SCHEMA.TABLES
	where table_name like ''%ETL%''

	exec (@dynSQL)
	print (@dynSQL)
	set @dynSQL = ''''

	set @dynSQL += ''-------------------------------------------------------------------------------------------------------''+CHAR(10)
	set @dynSQL += ''-- SCHEMA ETL SPROC ''+CHAR(10)
	set @dynSQL += ''-------------------------------------------------------------------------------------------------------''+CHAR(10)
	select top 2000000000
	@dynSQL += '' drop proc ''+ s.name +''.'' + p.name+char(10)
	from
		sys.procedures p
			inner join sys.schemas s on p.schema_id = s.schema_id
	where
		s.name = ''ETL''

	exec (@dynSQL)
	print (@dynSQL)
	set @dynSQL = ''''

	set @dynSQL += ''-------------------------------------------------------------------------------------------------------''+CHAR(10)
	set @dynSQL += ''-- SPROC NAME LIKE ETL ''+CHAR(10)
	set @dynSQL += ''-------------------------------------------------------------------------------------------------------''+CHAR(10)
	select top 2000000000
	@dynSQL += '' drop proc ''+ s.name +''.'' + p.name+char(10)
	from
		sys.procedures p
			inner join sys.schemas s on p.schema_id = s.schema_id
	where
		p.name like ''%ETL%''

	exec (@dynSQL)
	print (@dynSQL)
	set @dynSQL = ''''



	use WGStaging

	set @dynSQL += ''-------------------------------------------------------------------------------------------------------''+CHAR(10)
	set @dynSQL += ''-- DROP ALL STAGING TABLES IN WGStaging ''+CHAR(10)
	set @dynSQL += ''-------------------------------------------------------------------------------------------------------''+CHAR(10)
	select top 2000000000
	@dynSQL += '' drop ''+case when TABLE_TYPE = ''View'' then ''View'' else ''Table'' end+'' ''+TABLE_SCHEMA+''.''+TABLE_NAME+char(10)
	from INFORMATION_SCHEMA.TABLES

	exec (@dynSQL)
	print (@dynSQL)
	set @dynSQL = ''''')
end



GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO

/*
Deployment script for Dashboard.Database.WGStaging

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar WGReportDb "WGReport"
:setvar WGStagingDb "WGStaging"
:setvar DatabaseName "Dashboard.Database.WGStaging"
:setvar DefaultFilePrefix "Dashboard.Database.WGStaging"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Creating [dbo].[fn_getLatitude]...';


GO

CREATE function [dbo].[fn_getLatitude](@gps varchar(50)) 
returns varchar(50)
begin
	set @gps = SUBSTRING(@gps,charindex(':',@gps)+1,len(@gps));
	set @gps = SUBSTRING(@gps,0,charindex(':',@gps));
	return @gps;
end
GO
PRINT N'Creating [dbo].[fn_getLongitude]...';


GO

create function [dbo].[fn_getLongitude](@gps varchar(50)) 
returns varchar(50)
begin
	set @gps = SUBSTRING(@gps,charindex(':',@gps)+1,len(@gps));
	set @gps = SUBSTRING(@gps,charindex(':',@gps)+1,len(@gps));
	return @gps
end
GO
PRINT N'Creating [dbo].[fn_getGpsBinary]...';


GO
CREATE function [dbo].[fn_getGpsBinary](@gps varchar(50)) 
returns geography
begin
	if(CHARINDEX(' ',@gps) > 0) return geography::STPointFromText('POINT('+dbo.fn_getLatitude(@gps)+' '+dbo.fn_getLongitude(@gps)+')', 4326); 
	return geography::Point(dbo.fn_getLatitude(@gps), dbo.fn_getLongitude(@gps), 4326)
end
GO
PRINT N'Creating [dbo].[PurgeDateCompleted]...';


GO

create proc [dbo].PurgeDateCompleted as
begin

declare @dynSQL nvarchar(max) = ''

select 
	@dynSQL += 
	'delete from '+TABLE_SCHEMA+'.'+TABLE_NAME + ' where datecompleted is not null '+char(10) +
	'if (select count(*) from '+TABLE_SCHEMA+'.'+TABLE_NAME + ' where DateCompleted is null) = 0
	begin
		drop table '+TABLE_SCHEMA+'.'+TABLE_NAME + '
	end '+char(10)+char(10)  
from INFORMATION_SCHEMA.TABLES
where
	TABLE_NAME in (select table_name from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'DateCompleted')

exec (@dynSQL)
print (@dynSQL)
set @dynSQL = ''
end
GO
PRINT N'Creating [dbo].[TransformCaseItemInfoFact]...';


GO

create proc TransformCaseItemInfoFact (@stagingTable nvarchar(max)) as
begin
	set nocount on

	if OBJECT_ID(@stagingTable) is null
	BEGIN
		PRINT 'TABLE "'+@stagingTable+'" DOES NOT EXISTS'
		RETURN
	END

	declare @dynSQL nvarchar(max)
	if OBJECT_ID('tempdb..#source') is not null drop table #source

	CREATE TABLE #source(
		[StagingID] [bigint] NOT NULL,
		[BatchID] [uniqueidentifier] NOT NULL,
		[SourceID] [uniqueidentifier] NOT NULL primary key,
		[StagingStatus] [varchar](1) NULL,
		[MD5RowHash] [varbinary](25) NULL,
		[ID] [uniqueidentifier] NULL,
		[CaseID] [uniqueidentifier] NULL,
		[CaseCreated] [datetime] NULL,
		[CaseItemInfoName] [varchar](256) NULL,
		[CaseItemInfoCategory] [int] NULL,
		[CaseItemInfoCreated] [datetime] NULL,
		[CaseItemInfoStorageReferenceID] [bigint] NULL,
		[CaseItemInfoSizeInBytes] [bigint] NULL,
		[CaseItemInfoModified] [datetime] NULL,
	)

	set @dynSQL = N'
	select
		 [StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,coalesce([CaseID],'''') as CaseID
		,coalesce([CaseCreated],'''') as CaseCreated
		,coalesce([CaseItemInfoName],'''') as CaseItemInfoName
		,coalesce([CaseItemInfoCategory],'''') as CaseItemInfoCategory
		,coalesce([CaseItemInfoCreated],'''') as CaseItemInfoCreated
		,coalesce([CaseItemInfoStorageReferenceID],'''') as CaseItemInfoStorageReferenceID
		,coalesce([CaseItemInfoSizeInBytes],'''') as CaseItemInfoSizeInBytes
		,coalesce([CaseItemInfoModified],'''') as CaseItemInfoModified
	from
		WGStaging.dbo.'+@stagingTable+'
	where
		DateCompleted is null'

	insert into #source (
		 [StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[CaseID]
		,[CaseCreated]
		,[CaseItemInfoName]
		,[CaseItemInfoCategory]
		,[CaseItemInfoCreated]
		,[CaseItemInfoStorageReferenceID]
		,[CaseItemInfoSizeInBytes]
		,[CaseItemInfoModified]
	)
	exec sp_executesql @dynSQL
	
	/*************************************************************************************************************************************************************/
	/*** INSERT ALL THE NEW DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		insert into WGReport.dbo.FactCaseItemInfo ([SourceID],[CaseID],[CaseCreated],[CaseItemInfoName],[CaseItemInfoCategory],[CaseItemInfoCreated],[CaseItemInfoStorageReferenceID],[CaseItemInfoSizeInBytes],[CaseItemInfoModified])
		select 
			s.[SourceID],
			s.[CaseID],
			s.[CaseCreated],
			s.[CaseItemInfoName],
			s.[CaseItemInfoCategory],
			s.[CaseItemInfoCreated],
			s.[CaseItemInfoStorageReferenceID],
			s.[CaseItemInfoSizeInBytes],
			s.[CaseItemInfoModified]
		from
			#source s
				left join WGReport.dbo.FactCaseItemInfo fci on s.SourceID = fci.SourceID
		where
			s.StagingStatus = 'I' and
			fci.Id is null

		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join WGReport.dbo.FactCaseItemInfo d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''I'' and
			s.DateCompleted is null'
		print @dynSQL
		exec sp_executesql @dynSQL
	commit

end
GO
PRINT N'Creating [dbo].[TransformCaseItemInfoRecordingEventBridge]...';


GO


create proc TransformCaseItemInfoRecordingEventBridge (@stagingTable nvarchar(max)) as
begin
	--set nocount on

	if OBJECT_ID(@stagingTable) is null
	BEGIN
		PRINT 'TABLE "'+@stagingTable+'" DOES NOT EXISTS'
		RETURN
	END

	declare @dynSQL nvarchar(max)
	if OBJECT_ID('tempdb..#source') is not null drop table #source

	CREATE TABLE #source(
		[StagingID] [bigint] NOT NULL,
		[BatchID] [uniqueidentifier] NOT NULL,
		[SourceID] [uniqueidentifier] NOT NULL,
		[StagingStatus] [varchar](1) NULL,
		[MD5RowHash] [varbinary](25) NULL,
		[ID] [uniqueidentifier] NULL,
		[RecordingEventID] [uniqueidentifier] NULL
	)

	set @dynSQL = N'
	select
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[RecordingEventID]
	from
		WGStaging.dbo.'+@stagingTable+'
	where
		DateCompleted is null'

	insert into #source (
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[RecordingEventID]
	)
	exec sp_executesql @dynSQL
	/*************************************************************************************************************************************************************/
	/*** INSERT ALL THE NEW DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		insert into WGReport.dbo.BridgeCaseItemInfoRecordingEvent(
			CaseItemInfoID,
			RecordingEventID
		)
		SELECT distinct
			[dec].ID as CaseItemInfoID,
			fre.ID as [RecordingEventID]
		  FROM #source s
				inner join WGReport.dbo.FactRecordingEvent fre on s.RecordingEventID = fre.SourceID
				inner join WGReport.dbo.FactCaseItemInfo [dec] on s.ID = [dec].SourceID
				left join WGReport.dbo.BridgeCaseItemInfoRecordingEvent bec on 
					bec.RecordingEventID = fre.ID and
					bec.CaseItemInfoID = [dec].ID
		where
			s.StagingStatus = 'I' and
			bec.ID is null


		set @dynSQL = N'update f
		set f.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' f
				inner join #source s on s.StagingID = f.StagingID
				inner join WGReport.dbo.FactRecordingEvent fre on s.RecordingEventID = fre.SourceID
				inner join WGReport.dbo.FactCaseItemInfo [dec] on s.ID = [dec].SourceID
				inner join WGReport.dbo.BridgeCaseItemInfoRecordingEvent bec on 
					bec.RecordingEventID = fre.ID and
					bec.CaseItemInfoID = [dec].ID
		where
			f.StagingStatus = ''I'' and
			f.DateCompleted is null'
		exec sp_executesql @dynSQL
		print @dynSQL
	commit

	--/*************************************************************************************************************************************************************/
	--/*** SLOWLY CHANGING DIMENSION: INSERTING THE NEW DATA **/
	--/*************************************************************************************************************************************************************/
	--begin transaction 
	--	update bec
	--		set
	--			bec.DateExpired = GETUTCDATE(),
	--			bec.Active = 0
	--	from
	--		[WGReport].[dbo].BridgeCaseItemInfoRecordingEvent bec 
	--			inner join WGReport.dbo.FactRecordingEvent fre on bec.RecordingEventID = fre.ID
	--			inner join WGReport.dbo.FactCaseItemInfo [dec] on bec.CaseItemInfoID = [dec].ID
	--			inner join #source s on 
	--				s.RecordingEventID = fre.SourceID and
	--				 s.ID = [dec].SourceID
	--	where
	--		s.StagingStatus = 'U' and
	--		bec.ID > 0 and
	--		bec.Active = 1 

	--	insert into WGReport.dbo.BridgeCaseItemInfoRecordingEvent(
	--		CaseItemInfoID,
	--		RecordingEventID
	--	)
	--	SELECT distinct
	--		[dec].ID as CaseItemInfoID,
	--		fre.ID as [RecordingEventID]
	--	  FROM #source s
	--			inner join WGReport.dbo.FactRecordingEvent fre on s.RecordingEventID = fre.SourceID
	--			inner join WGReport.dbo.FactCaseItemInfo [dec] on s.ID = [dec].SourceID
	--			inner join WGReport.dbo.BridgeCaseItemInfoRecordingEvent bec on 
	--				bec.RecordingEventID = fre.ID and
	--				bec.CaseItemInfoID = [dec].ID
	--	where
	--		s.StagingStatus = 'U' and
	--		bec.ID > 0 

	--	set @dynSQL = N'update s
	--	set s.DateCompleted = GETUTCDATE()
	--	from
	--		'+@stagingTable+' s
	--			inner join #source f on s.StagingID = f.StagingID
	--			inner join WGReport.dbo.FactRecordingEvent fre on f.RecordingEventID = fre.SourceID
	--			inner join WGReport.dbo.FactCaseItemInfo [dec] on f.ID = [dec].SourceID
	--			inner join WGReport.dbo.BridgeCaseItemInfoRecordingEvent bec on 
	--				bec.RecordingEventID = fre.ID and
	--				bec.CaseItemInfoID = [dec].ID
	--	where
	--		f.StagingStatus = ''U'' and
	--		s.DateCompleted is null'
	--	exec sp_executesql @dynSQL
	--	print @dynSQL

		/*** NOT DOING ANYTHING FOR MISSING RECORDING EVENTS EXCEPT JUST FINISHING THEM OUT IF THEY EXISTS.  SUSPECT IT DOESNT EXISTS **/
		set @dynSQL = N'update s set DateCompleted = GETUTCDATE() 
		from '+@stagingTable+' s 
		where RecordingEventID is null and DateCompleted is null'
		exec sp_executesql @dynSQL
		print @dynSQL

	--commit
end
GO
PRINT N'Creating [dbo].[TransformActivityTypeDimension]...';


GO

create proc TransformActivityTypeDimension (@stagingTable nvarchar(max)) as
begin
	set nocount on

create table #source (
	SourceID [int] not null default -1,
	ActivityCategory [varchar](50) NOT NULL DEFAULT '',
	Name [varchar](50) NOT NULL DEFAULT '',
	StagingStatus varchar(1)
)

insert into #source([ActivityCategory],[Name],[SourceID]) 
values
	('User Audit Type','Imported',0),
	('User Audit Type','Recovered',1),
	('User Audit Type','Exported',2),
	('User Audit Type','Archived',3),
	('User Audit Type','Deleted',4),
	('User Audit Type','Restored',5),
	('User Audit Type','LoggedIn',6),
	('User Audit Type','LogInAttempted',7),
	('User Audit Type','Viewed',8),
	('User Audit Type','Modified',9),
	('User Audit Type','BulkImported',10),
	('User Audit Type','Created',11),
	('User Audit Type','Uploaded',12),
	('User Audit Type','Shared',13),
	('User Audit Type','Concatenated',14),
	('User Audit Type','Transcoded',15),
	('User Audit Type','Edited',16),
	('User Audit Type','Enabled',17),
	('User Audit Type','Disabled',18),
	('User Audit Type','Downloaded',19),
	('User Audit Type','Forwarded',20),
	('User Audit Type','Played',21),
	('User Audit Type','Started',22),
	('User Audit Type','Unshared',23),
	('User Audit Type','Logout',24),
	('User Audit Type','Lockout',25),
	('User Audit Type','PasswordReset',26),
	('User Audit Type','CloudUploaded',27),
	('User Audit Type','General',28),
	('User Audit Type','Move',29),

	('Recording Event Audit Type','Imported',0),
	('Recording Event Audit Type','Recovered',1),
	('Recording Event Audit Type','Exported',2),
	('Recording Event Audit Type','Archived',3),
	('Recording Event Audit Type','Deleted',4),
	('Recording Event Audit Type','Restored',5),
	('Recording Event Audit Type','LoggedIn',6),
	('Recording Event Audit Type','LogInAttempted',7),
	('Recording Event Audit Type','Viewed',8),
	('Recording Event Audit Type','Modified',9),
	('Recording Event Audit Type','BulkImported',10),
	('Recording Event Audit Type','Created',11),
	('Recording Event Audit Type','Uploaded',12),
	('Recording Event Audit Type','Shared',13),
	('Recording Event Audit Type','Concatenated',14),
	('Recording Event Audit Type','Transcoded',15),
	('Recording Event Audit Type','Edited',16),
	('Recording Event Audit Type','Enabled',17),
	('Recording Event Audit Type','Disabled',18),
	('Recording Event Audit Type','Downloaded',19),
	('Recording Event Audit Type','Forwarded',20),
	('Recording Event Audit Type','Played',21),
	('Recording Event Audit Type','Started',22),
	('Recording Event Audit Type','Unshared',23),
	('Recording Event Audit Type','Logout',24),
	('Recording Event Audit Type','Lockout',25),
	('Recording Event Audit Type','PasswordReset',26),
	('Recording Event Audit Type','CloudUploaded',27),
	('Recording Event Audit Type','General',28),
	('Recording Event Audit Type','Move',29),

	('Case Audit Type','Imported',0),
	('Case Audit Type','Recovered',1),
	('Case Audit Type','Exported',2),
	('Case Audit Type','Archived',3),
	('Case Audit Type','Deleted',4),
	('Case Audit Type','Restored',5),
	('Case Audit Type','LoggedIn',6),
	('Case Audit Type','LogInAttempted',7),
	('Case Audit Type','Viewed',8),
	('Case Audit Type','Modified',9),
	('Case Audit Type','BulkImported',10),
	('Case Audit Type','Created',11),
	('Case Audit Type','Uploaded',12),
	('Case Audit Type','Shared',13),
	('Case Audit Type','Concatenated',14),
	('Case Audit Type','Transcoded',15),
	('Case Audit Type','Edited',16),
	('Case Audit Type','Enabled',17),
	('Case Audit Type','Disabled',18),
	('Case Audit Type','Downloaded',19),
	('Case Audit Type','Forwarded',20),
	('Case Audit Type','Played',21),
	('Case Audit Type','Started',22),
	('Case Audit Type','Unshared',23),
	('Case Audit Type','Logout',24),
	('Case Audit Type','Lockout',25),
	('Case Audit Type','PasswordReset',26),
	('Case Audit Type','CloudUploaded',27),
	('Case Audit Type','General',28),
	('Case Audit Type','Move',29),

	('Share Audit Type','Imported',0),
	('Share Audit Type','Recovered',1),
	('Share Audit Type','Exported',2),
	('Share Audit Type','Archived',3),
	('Share Audit Type','Deleted',4),
	('Share Audit Type','Restored',5),
	('Share Audit Type','LoggedIn',6),
	('Share Audit Type','LogInAttempted',7),
	('Share Audit Type','Viewed',8),
	('Share Audit Type','Modified',9),
	('Share Audit Type','BulkImported',10),
	('Share Audit Type','Created',11),
	('Share Audit Type','Uploaded',12),
	('Share Audit Type','Shared',13),
	('Share Audit Type','Concatenated',14),
	('Share Audit Type','Transcoded',15),
	('Share Audit Type','Edited',16),
	('Share Audit Type','Enabled',17),
	('Share Audit Type','Disabled',18),
	('Share Audit Type','Downloaded',19),
	('Share Audit Type','Forwarded',20),
	('Share Audit Type','Played',21),
	('Share Audit Type','Started',22),
	('Share Audit Type','Unshared',23),
	('Share Audit Type','Logout',24),
	('Share Audit Type','Lockout',25),
	('Share Audit Type','PasswordReset',26),
	('Share Audit Type','CloudUploaded',27),
	('Share Audit Type','General',28),
	('Share Audit Type','Move',29),

	('Recording Event Status','NotSet',0),
	('Recording Event Status','Importing',1),
	('Recording Event Status','Online',2),
	('Recording Event Status','Partial',3),
	('Recording Event Status','ArchivePending',4),
	('Recording Event Status','Archived',5),
	('Recording Event Status','RestorePending',6),
	('Recording Event Status','Restored',7),
	('Recording Event Status','PurgePending',8),
	('Recording Event Status','Purged',9),
	('Recording Event Status','Faulted',32767),

	('Recording Event User Online Status','DefaultRetentionPolicy',0),
	('Recording Event User Online Status','KeepOnline',1),
	('Recording Event User Online Status','EnsureArchived',2),
	('Device Activity','DeviceCheckout',214748365)



	/*************************************************************************************************************************************************************/
	/*** INSERT ALL THE NEW DATA **/
	/*************************************************************************************************************************************************************/

	insert into WGReport.dbo.DimActivityType([ActivityCategory],[Name],[SourceID]) 
	select
		s.[ActivityCategory],
		s.[Name],
		s.[SourceID]
	from
		#source s
			left join WGReport.dbo.DimActivityType t on 
						s.SourceID = t.SourceID and
						s.ActivityCategory = t.ActivityCategory
	where
		t.SourceID is null


	/*************************************************************************************************************************************************************/
	/*** SLOWLY CHANGING DIMENSION: INSERTING THE NEW DATA **/
	/*************************************************************************************************************************************************************/

	update s
	set StagingStatus = 'U'
	from 
		#source s 
			inner join WGReport.dbo.DimActivityType t on 
						s.SourceID = t.SourceID and
						s.ActivityCategory = t.ActivityCategory
	where
		s.Name <> t.Name and
		t.Active = 1

	update t
	set Active = 0, DateExpired = GETUTCDATE()
	from 
		WGReport.dbo.DimActivityType t
			inner join #source s on 
						s.SourceID = t.SourceID and
						s.ActivityCategory = t.ActivityCategory
	where
		s.Name <> t.Name and
		t.Active = 1 and
		s.StagingStatus = 'U'

	insert into WGReport.dbo.DimActivityType([ActivityCategory],[Name],[SourceID]) 
	select
		s.[ActivityCategory],
		s.[Name],
		s.[SourceID]
	from
		#source s 
	where
		StagingStatus = 'U'

end
GO
PRINT N'Creating [dbo].[TransformImportReasonDimension]...';


GO

create proc TransformImportReasonDimension (@stagingTable nvarchar(max)) as
begin
	set nocount on
	
create table #source (
	SourceID [int] not null default -1,
	Name [varchar](50) NOT NULL DEFAULT '',
	StagingStatus varchar(1)
)

insert into #source([Name],[SourceID]) 
values
	('NoMediaImported',0),
	('CriticalRule',1),
	('UserSpecified',2),
	('UserImportedAsCritical',4),
	('UserPurged',8),
	('NoInteraction',16),
	('XmlErrors',32),
	('MtdErrors',64),
	('Partial',128),
	('Recovery',256),
	('OfficerPurgeDenied',512),
	('InsufficientVideo',1024),
	('Restore',2048),
	('Remote',4096),
	('Online',8192)



	/*************************************************************************************************************************************************************/
	/*** INSERT ALL THE NEW DATA **/
	/*************************************************************************************************************************************************************/

	insert into WGReport.dbo.DimImportReason([Name],[SourceID]) 
	select
		s.[Name],
		s.[SourceID]
	from
		#source s
			left join WGReport.dbo.DimImportReason t on 
						s.SourceID = t.SourceID 
	where
		t.SourceID is null


	/*************************************************************************************************************************************************************/
	/*** SLOWLY CHANGING DIMENSION: INSERTING THE NEW DATA **/
	/*************************************************************************************************************************************************************/

	update s
	set StagingStatus = 'U'
	from 
		#source s 
			inner join WGReport.dbo.DimImportReason t on 
						s.SourceID = t.SourceID 
	where
		s.Name <> t.Name and
		t.Active = 1

	update t
	set Active = 0, DateExpired = GETUTCDATE()
	from 
		WGReport.dbo.DimImportReason t
			inner join #source s on 
						s.SourceID = t.SourceID 
	where
		s.Name <> t.Name and
		t.Active = 1 and
		s.StagingStatus = 'U'

	insert into WGReport.dbo.DimImportReason([Name],[SourceID]) 
	select
		s.[Name],
		s.[SourceID]
	from
		#source s 
	where
		StagingStatus = 'U'

end
GO
PRINT N'Creating [dbo].[TransformDeviceCheckoutFact]...';


GO

create proc TransformDeviceCheckoutFact (@stagingTable nvarchar(max)) as
begin
	set nocount on

	if OBJECT_ID(@stagingTable) is null
	BEGIN
		PRINT 'TABLE "'+@stagingTable+'" DOES NOT EXISTS'
		RETURN
	END

	declare @dynSQL nvarchar(max)
	if OBJECT_ID('tempdb..#source') is not null drop table #source

	CREATE TABLE #source(
		[StagingID] [bigint] NOT NULL,
		[BatchID] [uniqueidentifier] NOT NULL,
		[SourceID] [uniqueidentifier] NOT NULL primary key,
		[StagingStatus] [varchar](1) NULL,
		[MD5RowHash] [varbinary](25) NULL,
		[ID] [uniqueidentifier] NULL,
		[DeviceID] [uniqueidentifier] NULL,
		[CheckedOut] [datetime] NULL,
		[OfficerID] [int] NULL,
		[AssignmentID] [uniqueidentifier] NULL,
		[AuditID] [uniqueidentifier] NULL
	)

	set @dynSQL = N'
	select
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[DeviceID]
		,[CheckedOut]
		,[OfficerID]
		,[AssignmentID]
		,[AuditID]
	from
		WGStaging.dbo.'+@stagingTable+'
	where
		DateCompleted is null'

	insert into #source (
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[DeviceID]
		,[CheckedOut]
		,[OfficerID]
		,[AssignmentID]
		,[AuditID]
	)
	exec sp_executesql @dynSQL
	
	/*************************************************************************************************************************************************************/
	/*** INSERT ALL THE NEW DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 

		insert into WGReport.dbo.FactDeviceCheckout (
			[SourceID],
			[ActivityTypeID],
			[DeviceID],
			[OfficerID],
			[AssignmentID],
			[DateCheckedOut],
			[DateCheckedOutID]
			)
		select
			dc.[ID] as SourceID,
			ActivityTypeID = coalesce((select top 1 at.ID from WGReport.dbo.DimActivityType at where ActivityCategory = 'Device Activity' and name = 'DeviceCheckout' and Active = 1),-1),
			[DeviceID] = coalesce((select top 1 d.ID from WGReport.dbo.DimDevice d where dc.DeviceID = d.SourceID and Active = 1),-1),
			[OfficerID] = coalesce((select top 1 f.ID from WGReport.dbo.DimOfficer f where dc.[OfficerID] = f.SourceID and Active = 1),-1),
			dc.[AssignmentID], -- THIS VALUE COMES FROM [Management].VistaAssignment TABLE's ID column
			dc.[CheckedOut] as [DateCheckedOut],
			[DateCheckedOutID] = coalesce((select top 1 d.dateID from WGReport.dbo.DimDate d where d.[date] = cast(cast(dc.[CheckedOut] as date) as datetime)),-1)
		from	--WGEvidenceLibrary.Audit.DeviceCheckout DOES NOT EXIST ON MARTIAN.  SCRIPT AND TRIGGER JOE ADDED
			#source dc
				left join WGReport.dbo.FactDeviceCheckout fdc on dc.ID = fdc.SourceID
		where
			fdc.SourceID is null


		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join WGReport.dbo.FactDeviceCheckout d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''I'' and
			s.DateCompleted is null'
		print @dynSQL
		exec sp_executesql @dynSQL
		

	commit

end
GO
PRINT N'Creating [dbo].[TransformDeviceDimension]...';


GO


create proc TransformDeviceDimension (@stagingTable nvarchar(max)) as
begin
	set nocount on

	if OBJECT_ID(@stagingTable) is null
	BEGIN
		PRINT 'TABLE "'+@stagingTable+'" DOES NOT EXISTS'
		RETURN
	END

	declare @dynSQL nvarchar(max)
	if OBJECT_ID('tempdb..#source') is not null drop table #source

	CREATE TABLE #source(
		[StagingID] [bigint] NOT NULL,
		[BatchID] [uniqueidentifier] NOT NULL,
		[SourceID] [uniqueidentifier] NOT NULL primary key,
		[StagingStatus] [varchar](1) NULL,
		[MD5RowHash] [varbinary](25) NULL,
		[ID] [uniqueidentifier] NOT NULL,
		[Name] [varchar](50) NULL,
		[SerialNumber] [varchar](50) NULL,
		[VehicleID] [varchar](50) NOT NULL,
		[IPAddress] [varchar](50) NULL,
		[MACAddress] [varchar](50) NULL,
		[SoftwareVersion] [varchar](50) NULL,
		[ConfigurationVersion] [varchar](50) NULL
	)

	set @dynSQL = N'
	select
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[Name]
		,[SerialNumber]
		,[VehicleID]
		,[IPAddress]
		,[MACAddress]
		,[SoftwareVersion]
		,[ConfigurationVersion]
	from
		WGStaging.dbo.'+@stagingTable+'
	where
		DateCompleted is null'

	insert into #source (
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[Name]
		,[SerialNumber]
		,[VehicleID]
		,[IPAddress]
		,[MACAddress]
		,[SoftwareVersion]
		,[ConfigurationVersion]
	)
	exec sp_executesql @dynSQL
	
	/*************************************************************************************************************************************************************/
	/*** INSERT ALL THE NEW DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		insert into WGReport.dbo.DimDevice (
			[SourceID]
			,[Name]
			,[SerialNumber]
			,[VehicleID]
			,[IPAddress]
			,[MACAddress]
			,[SoftwareVersion]
			,[ConfigurationVersion]
		)
		select
			s.[SourceID]
			,s.[Name]
			,s.[SerialNumber]
			,s.[VehicleID]
			,s.[IPAddress]
			,s.[MACAddress]
			,s.[SoftwareVersion]
			,s.[ConfigurationVersion]
		from
			#source s
				left join WGReport.dbo.DimDevice d on s.SourceID = d.SourceID
		where
			d.SourceID is null and
			s.StagingStatus = 'I'


		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join WGReport.dbo.DimDevice d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''I'' and
			s.DateCompleted is null'
		print @dynSQL
		exec sp_executesql @dynSQL
	commit

	/*************************************************************************************************************************************************************/
	/*** SLOWLY CHANGING DIMENSION: INSERTING THE NEW DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		update d
			set
				d.DateExpired = GETUTCDATE(),
				d.Active = 0
		from
			[WGReport].[dbo].DimDevice d 
				inner join #source s on s.SourceID = d.SourceID
		where
			s.StagingStatus = 'U' and
			d.ID > 0 and
			d.Active = 1 

		insert into WGReport.dbo.DimDevice (
			[SourceID]
			,[Name]
			,[SerialNumber]
			,[VehicleID]
			,[IPAddress]
			,[MACAddress]
			,[SoftwareVersion]
			,[ConfigurationVersion]
		)
		select
			s.[SourceID]
			,s.[Name]
			,s.[SerialNumber]
			,s.[VehicleID]
			,s.[IPAddress]
			,s.[MACAddress]
			,s.[SoftwareVersion]
			,s.[ConfigurationVersion]
		from
			#source s
		where
			s.StagingStatus = 'U'

		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join [WGReport].[dbo].[DimDevice] d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''U'' and
			s.DateCompleted is null and
			d.Active = 1'
		print @dynSQL
		exec sp_executesql @dynSQL

	commit


	/*************************************************************************************************************************************************************/
	/*** SLOWLY CHANGING DIMENSION: EXPIRING THE CURRENT DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		update d
		set
			DateDeleted = GETUTCDATE()
		from
			[WGReport].[dbo].[DimDevice] d 
				inner join #source s on s.SourceID = d.SourceID
		where
			s.StagingStatus = 'D' and
			d.ID > 0 and
			d.Active = 1 

		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join [WGReport].[dbo].[DimDevice] d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''D'' and
			s.DateCompleted is null and
			d.Active = 1'
		print @dynSQL
		exec sp_executesql @dynSQL

	commit
end
GO
PRINT N'Creating [dbo].[TransformEventActivityFact]...';


GO

create proc TransformEventActivityFact (@stagingTable nvarchar(max)) as
begin
	set nocount on

	if OBJECT_ID(@stagingTable) is null
	BEGIN
		PRINT 'TABLE "'+@stagingTable+'" DOES NOT EXISTS'
		RETURN
	END

	declare @dynSQL nvarchar(max)
	if OBJECT_ID('tempdb..#source') is not null drop table #source

	CREATE TABLE #source(
		[StagingID] [bigint] NOT NULL,
		[BatchID] [uniqueidentifier] NOT NULL,
		[SourceID] [uniqueidentifier] NOT NULL primary key,
		[StagingStatus] [varchar](1) NULL,
		[MD5RowHash] [varbinary](25) NULL,
		[ID] [uniqueidentifier] NULL,
		[RecordingEventID] [uniqueidentifier] NULL,
		[EventStatus] [smallint] NULL,
		[AuditActivity] [int] NULL,
		[AuditType] [int] NULL,
		[Modified] [datetime] NULL,
		[OccurredAt] [datetime] NULL
	)

	set @dynSQL = N'
	select
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[RecordingEventID]
		,[EventStatus]
		,[AuditActivity]
		,[AuditType]
		,[Modified]
		,[OccurredAt]
	from
		WGStaging.dbo.'+@stagingTable+'
	where
		DateCompleted is null'

	insert into #source (
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[RecordingEventID]
		,[EventStatus]
		,[AuditActivity]
		,[AuditType]
		,[Modified]
		,[OccurredAt]
	)
	exec sp_executesql @dynSQL
	
	/*************************************************************************************************************************************************************/
	/*** INSERT ALL THE NEW DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		insert into WGReport.dbo.FactEventActivity (RecordingEventID,ActivityTypeID,ActivityDate,ActivityDateID)
		select DISTINCT
			fre.ID as RecordingEventID,
			dat.ID as ActivityTypeID,
			s.Modified as ActivityDate,
			ActivityDateID = case when convert(varchar,s.Modified,112) between '20000101' and '20501231' then convert(varchar,s.Modified,112) else -1 end
		from
			#source s
				inner join WGReport.dbo.DimActivityType dat on s.EventStatus = dat.SourceID and dat.Active = 1
				inner join WGReport.dbo.FactRecordingEvent fre on fre.SourceID = s.RecordingEventID
				left join WGReport.dbo.FactEventActivity fea on 
								fea.RecordingEventID = fre.ID and
								fea.ActivityTypeID = dat.ID and
								fea.ActivityDate = s.Modified
		where
			s.StagingStatus = 'I' and
			dat.ActivityCategory = 'Recording Event Status' and
			fea.ID is null


		insert into WGReport.dbo.FactEventActivity (RecordingEventID,ActivityTypeID,ActivityDate,ActivityDateID)
		select 
			fre.ID as RecordingEventID,
			dat.ID as ActivityTypeID,
			ae.OccurredAt as ActivityDate,
			ActivityDateID = case when convert(varchar,ae.OccurredAt,112) between '20000101' and '20501231' then convert(varchar,ae.OccurredAt,112) else -1 end
		from
			#source ae
				inner join WGReport.dbo.DimActivityType dat on ae.AuditType = dat.SourceID and dat.Active = 1
				inner join WGReport.dbo.FactRecordingEvent fre on ae.RecordingEventID = fre.SourceID 
				left join WGReport.dbo.FactEventActivity fea on 
								fea.RecordingEventID = fre.ID and
								fea.ActivityTypeID = dat.ID and
								fea.ActivityDate = ae.OccurredAt
		where
			ae.StagingStatus = 'I' and
			ae.AuditActivity = 1 and
			dat.ActivityCategory = 'Recording Event Audit Type' and
			fea.ID is null

			set @dynSQL = N'update s
			set s.DateCompleted = GETUTCDATE()
			from
				'+@stagingTable+' s
					inner join #source f on s.StagingID = f.StagingID
					inner join WGReport.dbo.DimActivityType dat on f.EventStatus = dat.SourceID
					inner join WGReport.dbo.FactRecordingEvent fre on fre.SourceID = f.RecordingEventID
					inner join WGReport.dbo.FactEventActivity fea on 
									fea.RecordingEventID = fre.ID and
									fea.ActivityTypeID = dat.ID and
									fea.ActivityDate = f.Modified
			where
				f.StagingStatus = ''I'' and
				s.DateCompleted is null'
			print @dynSQL
			exec sp_executesql @dynSQL


			set @dynSQL = N'update s
			set s.DateCompleted = GETUTCDATE()
			from
				'+@stagingTable+' s
					inner join #source f on s.StagingID = f.StagingID
					inner join WGReport.dbo.DimActivityType dat on f.EventStatus = dat.SourceID
					inner join WGReport.dbo.FactRecordingEvent fre on fre.SourceID = f.RecordingEventID
					inner join WGReport.dbo.FactEventActivity fea on 
									fea.RecordingEventID = fre.ID and
									fea.ActivityTypeID = dat.ID and
									fea.ActivityDate = f.OccurredAt
			where
				f.StagingStatus = ''I'' and
				s.DateCompleted is null'
			print @dynSQL
			exec sp_executesql @dynSQL

	commit

end
GO
PRINT N'Creating [dbo].[TransformEventCategoryBridge]...';


GO


create proc TransformEventCategoryBridge (@stagingTable nvarchar(max)) as
begin
	--set nocount on

	if OBJECT_ID(@stagingTable) is null
	BEGIN
		PRINT 'TABLE "'+@stagingTable+'" DOES NOT EXISTS'
		RETURN
	END

	declare @dynSQL nvarchar(max)
	if OBJECT_ID('tempdb..#source') is not null drop table #source

	CREATE TABLE #source(
		[StagingID] [bigint] NOT NULL,
		[BatchID] [uniqueidentifier] NOT NULL,
		[SourceID] [int] NOT NULL primary key,
		[StagingStatus] [varchar](1) NULL,
		[MD5RowHash] [varbinary](25) NULL,
		[ID] [int] NULL,
		[MetaDataEventTagItemID] [int] NULL,
		[RecordingEventID] [uniqueidentifier] NULL,
		[EventCategoryID] [int] NULL,
		[EventCategory] [varchar](256) NULL,
		[RetentionDays] [nvarchar](max) NULL,
		[Critical] [int] NULL
	)

	set @dynSQL = N'
	select
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[MetaDataEventTagItemID]
		,[RecordingEventID]
		,[EventCategoryID]
		,[EventCategory]
		,[RetentionDays]
		,[Critical]
	from
		WGStaging.dbo.'+@stagingTable+'
	where
		DateCompleted is null'

	insert into #source (
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[MetaDataEventTagItemID]
		,[RecordingEventID]
		,[EventCategoryID]
		,[EventCategory]
		,[RetentionDays]
		,[Critical]
	)
	exec sp_executesql @dynSQL
	/*************************************************************************************************************************************************************/
	/*** INSERT ALL THE NEW DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		insert into WGReport.dbo.BridgeEventCategory(
			EventCategoryID,
			RecordingEventID
		)
		SELECT distinct
			[dec].ID as EventCategoryID,
			fre.ID as [RecordingEventID]
		  FROM #source s
				inner join WGReport.dbo.FactRecordingEvent fre on s.RecordingEventID = fre.SourceID
				inner join WGReport.dbo.DimEventCategory [dec] on s.EventCategoryID = [dec].SourceID and [dec].Active = 1
				left join WGReport.dbo.BridgeEventCategory bec on 
					bec.RecordingEventID = fre.ID and
					bec.EventCategoryID = [dec].ID
		where
			s.StagingStatus = 'I' and
			bec.ID is null


		set @dynSQL = N'update f
		set f.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' f
				inner join #source s on s.StagingID = f.StagingID
				inner join WGReport.dbo.FactRecordingEvent fre on s.RecordingEventID = fre.SourceID
				inner join WGReport.dbo.DimEventCategory [dec] on s.EventCategoryID = [dec].SourceID
				inner join WGReport.dbo.BridgeEventCategory bec on 
					bec.RecordingEventID = fre.ID and
					bec.EventCategoryID = [dec].ID
		where
			f.StagingStatus = ''I'' and
			f.DateCompleted is null'
		exec sp_executesql @dynSQL
		print @dynSQL
	commit

	--/*************************************************************************************************************************************************************/
	--/*** SLOWLY CHANGING DIMENSION: UPDATE THE EXISTING RECORDING EVENT WITH A NEW EVENT CATEGORY**/
	--/*************************************************************************************************************************************************************/
	begin transaction 
		-- DEACTIVATING THE OLD EVENT CATEGORY TIED TO THE RECORDING EVENT
		update bec
			set
				bec.DateExpired = GETUTCDATE(),
				bec.Active = 0
		from
			[WGReport].[dbo].BridgeEventCategory bec 
				inner join WGReport.dbo.FactRecordingEvent fre on bec.RecordingEventID = fre.ID
				inner join WGReport.dbo.DimEventCategory [dec] on bec.EventCategoryID = [dec].ID
				inner join #source s on 
					s.RecordingEventID = fre.SourceID
		where
			s.StagingStatus = 'U' and
			bec.ID > 0 and
			bec.Active = 1  

		-- INSERTING THE RECORDING EVENT WITH THE NEW EVENT CATEGORY ATTACHED
		insert into WGReport.dbo.BridgeEventCategory(
			EventCategoryID,
			RecordingEventID
		)
		SELECT distinct
			[dec].ID as EventCategoryID,
			fre.ID as [RecordingEventID]
		  FROM #source s
				inner join WGReport.dbo.FactRecordingEvent fre on s.RecordingEventID = fre.SourceID
				inner join WGReport.dbo.DimEventCategory [dec] on s.EventCategoryID = [dec].SourceID and [dec].Active = 1
				left join WGReport.dbo.BridgeEventCategory bec on 
					bec.RecordingEventID = fre.ID and
					bec.EventCategoryID = [dec].ID and
					bec.Active = 1
			where
				s.StagingStatus = 'U' and
				bec.ID is null


		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join WGReport.dbo.FactRecordingEvent fre on f.RecordingEventID = fre.SourceID
				inner join WGReport.dbo.DimEventCategory [dec] on f.EventCategoryID = [dec].SourceID
				inner join WGReport.dbo.BridgeEventCategory bec on 
					bec.RecordingEventID = fre.ID and
					bec.EventCategoryID = [dec].ID
		where
			f.StagingStatus = ''U'' and
			s.DateCompleted is null'
		exec sp_executesql @dynSQL
		print @dynSQL

		/*** NOT DOING ANYTHING FOR MISSING RECORDING EVENTS EXCEPT JUST FINISHING THEM OUT IF THEY EXISTS.  SUSPECT IT DOESNT EXISTS **/
		set @dynSQL = N'update s set DateCompleted = GETUTCDATE() 
		from '+@stagingTable+' s 
		where RecordingEventID is null and DateCompleted is null'
		exec sp_executesql @dynSQL
		print @dynSQL

	commit

	insert into WGReport.dbo.BridgeEventCategory(EventCategoryID,RecordingEventID)
	select -1 as EventCategoryID, ID as RecordingEventID from WGReport.dbo.FactRecordingEvent
	where ID not in (select RecordingEventID from WGReport.dbo.BridgeEventCategory where Active = 1)

	update bec
	set Active = 0,
		DateExpired = GETUTCDATE() 
	from
		WGReport.dbo.BridgeEventCategory bec
	where
		bec.ID in (
			select d1.ID
			from (
				select
					ID,
					ROW_NUMBER() over (partition by recordingEventId order by DateCreated desc) Keep1,
					recordingEventId,
					DateCreated
				from
					WGReport.dbo.BridgeEventCategory
				where
					RecordingEventID in (
						select RecordingEventID
						from WGReport.dbo.BridgeEventCategory
						where Active = 1
						group by RecordingEventID
						having count(*) > 1)
					) as d1
			where
				d1.Keep1 <> 1
		)
end
GO
PRINT N'Creating [dbo].[TransformEventCategoryDimension]...';


GO

create proc TransformEventCategoryDimension (@stagingTable nvarchar(max)) as
begin
	set nocount on

	if OBJECT_ID(@stagingTable) is null
	BEGIN
		PRINT 'TABLE "'+@stagingTable+'" DOES NOT EXISTS'
		RETURN
	END

	declare @dynSQL nvarchar(max)
	if OBJECT_ID('tempdb..#source') is not null drop table #source

	CREATE TABLE #source(
		[StagingID] [bigint] NOT NULL,
		[BatchID] [uniqueidentifier] NOT NULL,
		[SourceID] [int] NOT NULL primary key,
		[StagingStatus] [varchar](1) NULL,
		[MD5RowHash] [varbinary](25) NULL,
		[ID] [int] NULL,
		[EventCategoryID] [int] NULL,
		[Name] [varchar](50) NULL,
		[DisplayIndex] [tinyint] NULL,
		[RetentionDays] [int] NULL,
		[Critical] [int] NULL
	)

	set @dynSQL = N'
	select
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[EventCategoryID]
		,[Name]
		,[DisplayIndex]
		,[RetentionDays]
		,[Critical]
	from
		WGStaging.dbo.'+@stagingTable+'
	where
		DateCompleted is null'

	insert into #source ([StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[EventCategoryID]
		,[Name]
		,[DisplayIndex]
		,[RetentionDays]
		,[Critical])
	exec sp_executesql @dynSQL

	/*************************************************************************************************************************************************************/
	/*** REMOVE MULTIPLE UNKNOWN ISSUE **/
	/*************************************************************************************************************************************************************/
	update ds
	set SourceID = (select top 1 SourceID from #source where [StagingStatus] = 'I' and name = 'Unknown')
	from
		WGReport.dbo.DimEventCategory ds
	where
		ds.Id = -1 and
		ds.Name in (select top 1 Name from #source where [StagingStatus] = 'I' and name = 'Unknown')	

	/*************************************************************************************************************************************************************/
	/*** INSERT ALL THE NEW DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		insert into WGReport.dbo.DimEventCategory (
			[SourceID]
			,[Name]
			,[DisplayIndex]
			,[RetentionDays]
			,[Critical]
		)
		select
			s.[SourceID]
			,s.[Name]
			,s.[DisplayIndex]
			,s.[RetentionDays]
			,s.[Critical]
		from
			#source s
				left join WGReport.dbo.DimEventCategory d on s.SourceID = d.SourceID
		where
			d.SourceID is null and
			s.StagingStatus = 'I'


		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join WGReport.dbo.DimEventCategory d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''I'' and
			s.DateCompleted is null'
		print @dynSQL
		exec sp_executesql @dynSQL
	commit

	/*************************************************************************************************************************************************************/
	/*** SLOWLY CHANGING DIMENSION: INSERTING THE NEW DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		update d
			set
				d.DateExpired = GETUTCDATE(),
				d.Active = 0
		from
			[WGReport].[dbo].DimEventCategory d 
				inner join #source s on s.SourceID = d.SourceID
		where
			s.StagingStatus = 'U' and
			d.ID > 0 and
			d.Active = 1 and
			d.name <> 'Unknown'

		insert into WGReport.dbo.DimEventCategory (
			[SourceID]
			,[Name]
			,[DisplayIndex]
			,[RetentionDays]
			,[Critical]
		)
		select	
			s.[SourceID]
			,s.[Name]
			,s.[DisplayIndex]
			,s.[RetentionDays]
			,s.[Critical]
		from
			#source s
		where
			s.StagingStatus = 'U' and
			s.Name <> 'Unknown'

		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join [WGReport].[dbo].[DimEventCategory] d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''U'' and
			s.DateCompleted is null and
			d.Active = 1'
		print @dynSQL
		exec sp_executesql @dynSQL

	commit


	/*************************************************************************************************************************************************************/
	/*** SLOWLY CHANGING DIMENSION: EXPIRING THE CURRENT DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		update d
		set
			DateDeleted = GETUTCDATE()
		from
			[WGReport].[dbo].[DimEventCategory] d 
				inner join #source s on s.SourceID = d.SourceID
		where
			s.StagingStatus = 'D' and
			d.ID > 0 and
			d.Active = 1 

		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join [WGReport].[dbo].[DimEventCategory] d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''D'' and
			s.DateCompleted is null and
			d.Active = 1'
		print @dynSQL
		exec sp_executesql @dynSQL

	commit
end
GO
PRINT N'Creating [dbo].[TransformRecordingEventFact]...';


GO



create proc [dbo].[TransformRecordingEventFact] (@stagingTable nvarchar(max)) as
begin
	set nocount on

	if OBJECT_ID(@stagingTable) is null
	BEGIN
		PRINT 'TABLE "'+@stagingTable+'" DOES NOT EXISTS'
		RETURN
	END

	declare @dynSQL nvarchar(max)
	if OBJECT_ID('tempdb..#source') is not null drop table #source
	
	CREATE TABLE #source(
		[StagingID] [bigint] NOT NULL,
		[BatchID] [uniqueidentifier] NOT NULL,
		[SourceID] [uniqueidentifier] NOT NULL primary key,
		[StagingStatus] [varchar](1) NULL,
		[MD5RowHash] [varbinary](25) NULL,
		[ID] [uniqueidentifier] NOT NULL,
		[OfficerID] [int] NULL,
		[StorageID] [int] NULL,
		[DeviceID] [uniqueidentifier] NULL,
		[ImportReasonID] [int] NOT NULL,
		[RecordStartID] [int] NULL,
		[DateCreatedID] [int] NULL,
		[DateImportedID] [int] NULL,
		[DurationSeconds] [bigint] NULL,
		[Restricted] [bit] NULL,
		[DVRCleared] [bit] NULL,
		[REID] [varchar](50) NOT NULL,
		[PreEvent] [bigint] NULL,
		[RecordStart] [datetime] NULL,
		[RecordStop] [datetime] NULL,
		[PostEvent] [bigint] NULL,
		[ImportSource] [int] NULL,
		[Created] [datetime] NULL,
		[Imported] [datetime] NULL,
		[LastUsed] [datetime] NULL,
		[Archived] [date] NULL,
		[SubstationID] [uniqueidentifier] NULL,
		[SoftwareVersion] [varchar](50) NULL,
		[MinGPS] [varchar](40) NULL,
		[MaxGPS] [varchar](40) NULL,
		[MinGPSGEO] [geography] NULL,
		[MaxGPSGEO] [geography] NULL,
		[MinSpeed] [int] NOT NULL,
		[MaxSpeed] [int] NOT NULL,
		Size [bigint],
		[Note] [nvarchar](4000) NULL,
		[GroupId] [varchar](50) NULL,
		[Part] [tinyint] NULL,
		[TotalParts] [tinyint] NULL,
		[LinkChecked] [bit] NULL,
		GpsComplete [bit] 
	)

	set @dynSQL = N'
	select
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[OfficerID]
		,[StorageID]
		,[DeviceID]
		,[ImportReasonID]
		,[RecordStartID]
		,[DateCreatedID]
		,[DateImportedID]
		,[DurationSeconds]
		,[Restricted]
		,[DVRCleared]
		,[REID]
		,[PreEvent]
		,[RecordStart]
		,[RecordStop]
		,[PostEvent]
		,[ImportSource]
		,[Created]
		,[Imported]
		,[LastUsed]
		,[Archived]
		,[SubstationID]
		,[SoftwareVersion]
		,[MinGPS]
		,[MaxGPS]
		,[MinSpeed]
		,[MaxSpeed]
		,[Size]
		,[Note]
		,[GroupId]
		,[Part]
		,[TotalParts]
		,[LinkChecked]
	from
		WGStaging.dbo.'+@stagingTable+'
	where
		DateCompleted is null'

	insert into #source (
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[ID]
		,[OfficerID]
		,[StorageID]
		,[DeviceID]
		,[ImportReasonID]
		,[RecordStartID]
		,[DateCreatedID]
		,[DateImportedID]
		,[DurationSeconds]
		,[Restricted]
		,[DVRCleared]
		,[REID]
		,[PreEvent]
		,[RecordStart]
		,[RecordStop]
		,[PostEvent]
		,[ImportSource]
		,[Created]
		,[Imported]
		,[LastUsed]
		,[Archived]
		,[SubstationID]
		,[SoftwareVersion]
		,[MinGPS]
		,[MaxGPS]
		,[MinSpeed]
		,[MaxSpeed]
		,[Size]
		,[Note]
		,[GroupId]
		,[Part]
		,[TotalParts]
		,[LinkChecked]
	)
	exec sp_executesql @dynSQL


	/*************************************************************************************************************************************************************/
	/*** UPDATING MIN AND MAX GEOGRAPHY GPS COORDINATES **/
	/*************************************************************************************************************************************************************/
	declare @StagingID int
	declare @MinGps varchar(50) = ''
	declare @MaxGps varchar(50) = ''
	while (select count(*) from #source where GpsComplete is null) > 0
	begin
		select top 1 
			@StagingID = StagingID,
			@MinGps = MinGPS,
			@MaxGps = MaxGPS
		from #source
		where GpsComplete is null

		BEGIN TRY  
			update #source
			set 
				MinGPSGEO = dbo.fn_getGpsBinary(MinGPS),
				MaxGPSGEO = dbo.fn_getGpsBinary(MaxGPS),
				GpsComplete = 1
			where
				StagingID = @StagingID
			print (cast(@StagingID as varchar(max)) + ' GOOD')
		END TRY  
		BEGIN CATCH 
			update #source
			set 
				MinGPSGEO = dbo.fn_getGpsBinary(''),
				MaxGPSGEO = dbo.fn_getGpsBinary(''),
				GpsComplete = 1
			where
				StagingID = @StagingID
			print (cast(@StagingID as varchar(max)) + ' BAD')

		END CATCH; 
	end

	/*************************************************************************************************************************************************************/
	/*** INSERT ALL THE NEW DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		insert into WGReport.dbo.FactRecordingEvent (
		  [SourceID]
		  ,[OfficerID]
		  ,[StorageID]
		  ,[DeviceID]
		  ,[ImportReasonID]
		  ,[RecordStartID]
		  ,[DateCreatedID]
		  ,[DateImportedID]
		  ,[Duration]
		  ,[Restricted]
		  ,[DVRCleared]
		  ,[REID]
		  ,[PreEvent]
		  ,[RecordStart]
		  ,[RecordStop]
		  ,[PostEvent]
		  ,[ImportSource]
		  ,[DateCreated]
		  ,[DateImported]
		  ,[LastUsed]
		  ,[Archived]
		  ,[SubstationID]
		  ,[SoftwareVersion]
		  ,[ConfigurationVersion]
		  ,[MinLatitude]
		  ,[MinLongitude]
		  ,[MaxLatitude]
		  ,[MaxLongitude]
		  ,[MinSpeed]
		  ,[MaxSpeed]
		  ,[MinGPS]
		  ,[MaxGPS]
		  ,[Size]
		  ,[Note]
		  ,[GroupId]
		  ,[Part]
		  ,[TotalParts]
		  ,[LinkChecked]
		)
		select
		  s.[SourceID]
		  ,coalesce(o.ID,-1) as [OfficerID]
		  ,coalesce(ds.ID,-1) as [StorageID]
		  ,coalesce(d.ID,-1) as [DeviceID]
		  ,coalesce(ir.ID,-1) as [ImportReasonID]
		  ,s.[RecordStartID]
		  ,s.[DateCreatedID]
		  ,s.[DateImportedID]
		  ,s.DurationSeconds as [Duration]
		  ,s.[Restricted]
		  ,s.[DVRCleared]
		  ,s.[REID]
		  ,s.[PreEvent]
		  ,s.[RecordStart]
		  ,s.[RecordStop]
		  ,s.[PostEvent]
		  ,s.[ImportSource]
		  ,s.Created as [DateCreated]
		  ,s.Imported as [DateImported]
		  ,s.[LastUsed]
		  ,s.[Archived]
		  ,s.[SubstationID]
		  ,s.[SoftwareVersion]
		  ,'' as [ConfigurationVersion]
		  ,dbo.fn_getLatitude(s.MinGPS) as [MinLatitude]
		  ,dbo.fn_getLongitude(s.MinGPS)  as [MinLongitude]
		  ,dbo.fn_getLatitude(s.MaxGPS)  as [MaxLatitude]
		  ,dbo.fn_getLongitude(s.MaxGPS)  as [MaxLongitude]
		  ,s.[MinSpeed]
		  ,s.[MaxSpeed]
		  ,[MinGPSGEO]
		  ,[MaxGPSGEO]
		  ,s.[Size]
		  ,s.[Note]
		  ,s.[GroupId]
		  ,s.[Part]
		  ,s.[TotalParts]
		  ,s.[LinkChecked]
		from
			#source s
				left join WGReport.dbo.FactRecordingEvent fre on s.SourceID = fre.SourceID
				left join WGReport.dbo.DimOfficer o on s.OfficerID = o.SourceID and o.Active = 1
				left join WGReport.dbo.DimDevice d on s.DeviceID = d.SourceID and d.Active = 1
				left join WGReport.dbo.DimStorage ds on s.StorageID = ds.SourceID and ds.Active = 1
				left join WGReport.dbo.DimImportReason ir on s.ImportReasonID = ir.SourceID and ir.Active = 1
		where
			fre.SourceID is null and
			s.StagingStatus = 'I' 


		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join WGReport.dbo.FactRecordingEvent d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''I'' and
			s.DateCompleted is null'
		print @dynSQL
		exec sp_executesql @dynSQL
	commit


			update fre
		set	
			[OfficerID] = coalesce(o.ID,-1)
			,[StorageID] = coalesce(ds.ID,-1)
			,[DeviceID] = coalesce(d.ID,-1)
			,[ImportReasonID] = coalesce(ir.ID,-1)
		from
			WGReport.dbo.FactRecordingEvent fre		
				inner join #source s on s.SourceID = fre.SourceID
				left join WGReport.dbo.DimOfficer o on s.OfficerID = o.SourceID and o.Active = 1
				left join WGReport.dbo.DimDevice d on s.DeviceID = d.SourceID and d.Active = 1
				left join WGReport.dbo.DimStorage ds on s.StorageID = ds.SourceID and ds.Active = 1
				left join WGReport.dbo.DimImportReason ir on s.ImportReasonID = ir.SourceID and ir.Active = 1
		where
			s.StagingStatus in ('U')

		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join WGReport.dbo.FactRecordingEvent d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''U'' and
			s.DateCompleted is null'
		print @dynSQL
		exec sp_executesql @dynSQL

		update WGReport.dbo.FactRecordingEvent
		set DateExpired = GETUTCDATE()
		where SourceID in (select s.sourceId from #source s where s.StagingStatus = 'D')

		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join WGReport.dbo.FactRecordingEvent d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''D'' and
			s.DateCompleted is null'
		print @dynSQL
		exec sp_executesql @dynSQL




end
GO
PRINT N'Creating [dbo].[TransformStorageDimension]...';


GO

create proc TransformStorageDimension (@stagingTable nvarchar(max)) as
begin
	set nocount on

	if OBJECT_ID(@stagingTable) is null
	BEGIN
		PRINT 'TABLE "'+@stagingTable+'" DOES NOT EXISTS'
		RETURN
	END

	declare @dynSQL nvarchar(max)
	if OBJECT_ID('tempdb..#source') is not null drop table #source

	CREATE TABLE #source(
		[StagingID] [bigint] NOT NULL,
		[BatchID] [uniqueidentifier] NOT NULL,
		[SourceID] [int] NOT NULL primary key,
		[StagingStatus] [varchar](1) NULL,
		[MD5RowHash] [varbinary](25) NULL,
		[Name] [varchar](50) NOT NULL,
		[Path] [varchar](255) NOT NULL,
		[Size] [bigint] not null
	)

	set @dynSQL = N'
	select
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[Name]
		,[Path]
		,[Size]
	from
		WGStaging.dbo.'+@stagingTable+'
	where
		DateCompleted is null'

	insert into #source (
		[StagingID]
		,[BatchID]
		,[SourceID]
		,[StagingStatus]
		,[MD5RowHash]
		,[Name]
		,[Path]
		,[Size]
	)
	exec sp_executesql @dynSQL

	/*************************************************************************************************************************************************************/
	/*** REMOVE MULTIPLE UNKNOWN ISSUE **/
	/*************************************************************************************************************************************************************/
	update ds
	set SourceID = (select top 1 SourceID from #source where [StagingStatus] = 'I' and name = 'Unknown')
	from
		WGReport.dbo.DimStorage ds
	where
		ds.Id = -1 and
		ds.Name in (select top 1 Name from #source where [StagingStatus] = 'I' and name = 'Unknown')


	/*************************************************************************************************************************************************************/
	/*** INSERT ALL THE NEW DATA **/
	/*************************************************************************************************************************************************************/

	begin transaction 
		insert into WGReport.dbo.DimStorage (
			[SourceID]
			,[Name]
			,[Path]
			,[Size]
		)
		select
			s.[SourceID]
			,s.[Name]
			,s.[Path]
			,s.[Size]
		from
			#source s
				left join WGReport.dbo.DimStorage d on s.SourceID = d.SourceID
		where
			d.SourceID is null and
			s.StagingStatus = 'I'


		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join WGReport.dbo.DimStorage d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''I'' and
			s.DateCompleted is null'
		print @dynSQL
		exec sp_executesql @dynSQL
	commit

	/*************************************************************************************************************************************************************/
	/*** SLOWLY CHANGING DIMENSION: INSERTING THE NEW DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		update d
			set
				d.DateExpired = GETUTCDATE(),
				d.Active = 0
		from
			[WGReport].[dbo].DimStorage d 
				inner join #source s on s.SourceID = d.SourceID
		where
			s.StagingStatus = 'U' and
			d.ID > 0 and
			d.Active = 1 and
			d.Name <> 'Unknown'

		insert into WGReport.dbo.DimStorage (
			[SourceID]
			,[Name]
			,[Path]
			,[Size]
		)
		select
			s.[SourceID]
			,s.[Name]
			,s.[Path]
			,s.[Size]
		from
			#source s
		where
			s.StagingStatus = 'U' and
			s.Name <> 'Unknown'

		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join [WGReport].[dbo].[DimStorage] d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''U'' and
			s.DateCompleted is null and
			d.Active = 1'
		print @dynSQL
		exec sp_executesql @dynSQL

	commit


	/*************************************************************************************************************************************************************/
	/*** SLOWLY CHANGING DIMENSION: EXPIRING THE CURRENT DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		update d
		set
			DateDeleted = GETUTCDATE()
		from
			[WGReport].[dbo].[DimStorage] d 
				inner join #source s on s.SourceID = d.SourceID
		where
			s.StagingStatus = 'D' and
			d.ID > 0 and
			d.Active = 1 

		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #source f on s.StagingID = f.StagingID
				inner join [WGReport].[dbo].[DimStorage] d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''D'' and
			s.DateCompleted is null and
			d.Active = 1'
		print @dynSQL
		exec sp_executesql @dynSQL

	commit
end
GO
PRINT N'Creating [dbo].[GetStagingBatches]...';


GO


create proc GetStagingBatches as 
begin
	declare @dynSQL nvarchar(max) = ''

	select top (2147483647)
		@dynSQL += 'select '''+table_name+''' as StagingTableName, StagingID, BatchID, DateCreated, DateCompleted from ' + QUOTENAME(table_name) + ' union all '
	from
		INFORMATION_SCHEMA.tables
	where
		table_name like 'staging_%'

	IF LEN(@dynSQL) = 0 
	BEGIN
		PRINT 'LOOK AT THAT, NO STAGING TABLES!'
		RETURN;
	END 

	set @dynSQL = SUBSTRING(@dynSQL,1,len(@dynSQL) - 9)

	set @dynSQL = 
	'select
		BatchID,
		StagingTableName,
		count(1) as TotalRows,
		count(datecompleted) as TotalCompleted,
		min([DateCreated]) as [DateCreated],
		case when count(1) = count(datecompleted) then Max([DateCompleted]) end as [DateCompleted]
	from
		(
		'+@dynSQL+'
		) as d1
	group by
		BatchID,
		StagingTableName
	order by
		StagingTableName'


	exec(@dynSQL)
	print(@dynSQL)
end
GO
PRINT N'Creating [dbo].[TransformOfficersDimension]...';


GO


create proc TransformOfficersDimension (@stagingTable nvarchar(max)) as
begin
	set nocount on

	declare @dynSQL nvarchar(max)
	if OBJECT_ID('tempdb..#Officer') is not null drop table #Officer

	CREATE TABLE #Officer(
		[ID] [bigint] IDENTITY(1,1) NOT NULL,
		[SourceID] [int] NOT NULL,
		[ParentID] [bigint] NOT NULL,
		[FirstName] [varchar](50) NOT NULL,
		[LastName] [varchar](50) NOT NULL,
		[MiddleName] [varchar](50) NOT NULL,
		[Title] [varchar](20) NOT NULL,
		[Badge] [varchar](20) NOT NULL,
		[StagingStatus] [varchar](1) not null,
		[StagingID] bigint not null
	)

	set @dynSQL = N'select
		[SourceID]
		,-1 as [ParentID]
		,coalesce([FirstName],'''') as [FirstName]
		,coalesce([LastName],'''') as [LastName]
		,coalesce([MiddleName],'''') as [MiddleName]
		,coalesce([Title],'''') as [Title]
		,coalesce([Badge],'''') as [Badge]
		,StagingStatus
		,[StagingID]
	from
		WGStaging.dbo.'+@stagingTable+'
	where
		DateCompleted is null'

	insert into #Officer (SourceID,ParentID,FirstName,LastName,MiddleName,Title,Badge,StagingStatus,StagingID)
	exec sp_executesql @dynSQL


	/*************************************************************************************************************************************************************/
	/*** INSERT ALL THE NEW DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		insert into [WGReport].[dbo].[DimOfficer] (SourceID,ParentID,FirstName,LastName,MiddleName,Title,Badge)
		select
			f.SourceID,f.ParentID,f.FirstName,f.LastName,f.MiddleName,f.Title,f.Badge
		from
			#Officer f
				left join [WGReport].[dbo].[DimOfficer] d on f.SourceID = d.SourceID
		where
			d.SourceID is null and
			StagingStatus = 'I'


		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #Officer f on s.StagingID = f.StagingID
				inner join [WGReport].[dbo].[DimOfficer] d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''I'' and
			s.DateCompleted is null'
		print @dynSQL
		exec sp_executesql @dynSQL
	commit

	/*************************************************************************************************************************************************************/
	/*** SLOWLY CHANGING DIMENSION: INSERTING THE NEW DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		update d
			set
				d.DateExpired = GETUTCDATE(),
				d.Active = 0
		from
			[WGReport].[dbo].[DimOfficer] d 
				inner join #Officer f on f.SourceID = d.SourceID
		where
			f.StagingStatus = 'U' and
			d.ID > 0 and
			d.Active = 1 

		insert into [WGReport].[dbo].[DimOfficer] (SourceID,ParentID,FirstName,LastName,MiddleName,Title,Badge)
		select	
			f.SourceID,f.ParentID,f.FirstName,f.LastName,f.MiddleName,f.Title,f.Badge
		from
			#Officer f
		where
			f.StagingStatus = 'U'

		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #Officer f on s.StagingID = f.StagingID
				inner join [WGReport].[dbo].[DimOfficer] d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''U'' and
			s.DateCompleted is null and
			d.Active = 1'
		print @dynSQL
		exec sp_executesql @dynSQL

	commit


	/*************************************************************************************************************************************************************/
	/*** SLOWLY CHANGING DIMENSION: EXPIRING THE CURRENT DATA **/
	/*************************************************************************************************************************************************************/
	begin transaction 
		update d
		set
			DateDeleted = GETUTCDATE()
		from
			[WGReport].[dbo].[DimOfficer] d 
				inner join #Officer f on f.SourceID = d.SourceID
		where
			f.StagingStatus = 'D' and
			d.ID > 0 and
			d.Active = 1 

		set @dynSQL = N'update s
		set s.DateCompleted = GETUTCDATE()
		from
			'+@stagingTable+' s
				inner join #Officer f on s.StagingID = f.StagingID
				inner join [WGReport].[dbo].[DimOfficer] d on f.SourceID = d.SourceID
		where
			f.StagingStatus = ''D'' and
			s.DateCompleted is null and
			d.Active = 1'
		print @dynSQL
		exec sp_executesql @dynSQL

	commit
end
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/


/****************************************************************************************************/
/*** PARAMETERS TO SET BELOW **/
/****************************************************************************************************/
use $(WGStagingDb) --> CHANGE THIS TO THE PARAMETER NAME FOR WGStaging.  Example: WGStaging_CD
declare @NewWGReportDBName nvarchar(max) = '$(WGReportDb)'  --> CHANGE THIS TO THE Parameter name for WGReport database.  Example: WGReport_CD
/****************************************************************************************************/

declare @dynSQL1 nvarchar(maX) = 'declare @dynSQL nvarchar(maX) '

select top 2147483647
	@dynSQL1 += '
	set @dynSQL = object_definition(object_id('''+name+'''))
	set @dynSQL = replace(@dynSQL,''create proc'',''alter proc'')
	set @dynSQL = replace(@dynSQL,''WGReport'',@NewWGReportDBName)

	exec (@dynSQL)
	' 
from 
	sys.procedures 
where 
	name like '%transform%'

exec sp_executesql @dynSQL1, N'@NewWGReportDBName nvarchar(max)', @NewWGReportDBName = @NewWGReportDBName
/****************************************************************************************************/
/*** PARAMETERS TO SET BELOW **/
/****************************************************************************************************/
use $(WGStagingDb) --> CHANGE THIS TO THE PARAMETER NAME FOR WGStaging.  Example: WGStaging_CD
declare @NewWGStagingDBName nvarchar(max) = '$(WGStagingDb)'  --> CHANGE THIS TO THE Parameter name for WGReport database.  Example: WGReport_CD
/****************************************************************************************************/

declare @dynSQL2 nvarchar(maX) = 'declare @dynSQL nvarchar(maX) '

select top 2147483647
	@dynSQL2 += '
	set @dynSQL = object_definition(object_id('''+name+'''))
	set @dynSQL = replace(@dynSQL,''create proc'',''alter proc'')
	set @dynSQL = replace(@dynSQL,''WGStaging'',@NewWGStagingDBName)

	exec (@dynSQL)
	' 
from 
	sys.procedures 
where 
	name like '%transform%'

exec sp_executesql @dynSQL2, N'@NewWGStagingDBName nvarchar(max)', @NewWGStagingDBName = @NewWGStagingDBName
use $(WGStagingDb)

exec TransformActivityTypeDimension ''
GO

DECLARE @dynSQL NVARCHAR(max);

SELECT top 2147483647
	@dynSQL += '
CREATE USER ['+name+'] FOR LOGIN ['+name+']
ALTER ROLE [db_owner] ADD MEMBER ['+name+']
' 
FROM master.sys.sysusers s
		inner join (
			SELECT sys.server_role_members.role_principal_id, role.name AS RoleName,   
				sys.server_role_members.member_principal_id, member.name AS MemberName  
			FROM sys.server_role_members  
			JOIN sys.server_principals AS role  
				ON sys.server_role_members.role_principal_id = role.principal_id  
			JOIN sys.server_principals AS member  
				ON sys.server_role_members.member_principal_id = member.principal_id 
			where role.name = 'sysadmin'
		) as d1 on s.name = d1.MemberName
where 
	s.name not in (select name from $(WGStagingDb).sys.database_principals) and
	issqlrole = 0 and	--  SQL Role
	isntname  = 1 and	--	Account is a Windows group or Windows user.
	(
	SELECT 1 as DBUserExists --su.name as DatabaseUser,
	FROM sys.sysusers su
	join sys.syslogins sl on sl.sid = su.sid
	where sl.name = s.name -- login	
	) is null
--	isntgroup = 1		--	Account is a Windows group.
--  isntuser  = 1		--  Account is a Windows user.
--  isapprole = 1		--  Account is an application role.

exec(@dynSQL)
print @dynSQL
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
